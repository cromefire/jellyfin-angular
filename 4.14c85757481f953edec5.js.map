{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/grid-list.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-bar.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/tooltip.js","./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js","./node_modules/ngx-infinite-scroll/__ivy_ngcc__/modules/ngx-infinite-scroll.js","./src/app/common/slider/slider.component.ts","./src/app/common/slider/slider.component.html","./src/app/library/home/home.component.html","./src/app/library/home/home.component.ts","./src/app/utils/emums.ts","./src/app/library/movies/movies.component.html","./src/app/shell/shell-routing.module.ts","./src/app/library/movies/movies.component.ts","./src/app/shell/shell.module.ts"],"names":["_c0","MAT_GRID_LIST","MatGridTile","_element","_gridList","this","_rowspan","_colspan","value","Math","round","property","nativeElement","ɵfac","t","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","rowspan","colspan","inputs","exportAs","ngContentSelectors","decls","vars","consts","template","styles","encapsulation","changeDetection","TileCoordinator","columnIndex","rowIndex","lastRowMax","max","tracker","rowCount","numColumns","tiles","Array","fill","length","positions","map","tile","_trackTile","gapStartIndex","_findMatchingGap","_markTilePosition","TilePosition","tileCols","Error","gapEndIndex","_nextRow","indexOf","_findGapEndIndex","i","start","row","col","cssCalcAllowedValue","TileStyler","_rows","gutterSize","cols","direction","_gutterSize","normalizeUnits","_cols","_direction","sizePercent","gutterFraction","baseSize","offset","calc","span","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","getBaseTileSize","_setStyle","getTilePosition","getTileSize","tileHeight","FixedTileStyler","fixedRowHeight","super","init","test","getTileSpan","getGutterSpan","list","_setListStyle","_tiles","forEach","RatioTileStyler","_parseRatio","baseTileHeight","rowHeightRatio","ratioParts","split","parseFloat","FitTileStyler","exp","match","MatGridList","_dir","_gutter","_rowHeight","newValue","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","reset","_tileCoordinator","filter","update","index","pos","setStyle","getComputedHeight","style","contentQueries","dirIndex","_t","features","provide","useExisting","MatGridListModule","ɵmod","ɵinj","factory","imports","MatProgressBarBase","_elementRef","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION","providedIn","_document","_location","location","getPathname","pathname","search","progressbarId","MatProgressBar","_ngZone","_animationMode","_isNoopAnimation","_value","_bufferValue","animationEnd","_animationEndSubscription","Subscription","EMPTY","mode","path","_rectangleFillValue","v","clamp","transform","bufferValue","runOutsideAngular","element","_primaryValueBar","fromEvent","pipe","e","target","subscribe","run","next","unsubscribe","viewQuery","first","color","outputs","_bufferTransform","_primaryTransform","directives","min","MatProgressBarModule","matTooltipAnimations","tooltipState","opacity","passiveListenerOptions","passive","getMatTooltipInvalidPositionError","position","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","scrollThrottle","MAT_TOOLTIP_DEFAULT_OPTIONS","showDelay","hideDelay","touchendHideDelay","MatTooltip","_overlay","_scrollDispatcher","_viewContainerRef","_platform","_ariaDescriber","_focusMonitor","scrollStrategy","_defaultOptions","_hammerLoader","_position","_disabled","touchGestures","_message","_passiveListeners","Map","_destroyed","Subject","_handleKeydown","event","_isTooltipVisible","keyCode","preventDefault","stopPropagation","hide","_scrollStrategy","monitor","takeUntil","origin","show","addEventListener","_overlayRef","_updatePosition","_tooltipInstance","updatePosition","removeDescription","trim","_updateTooltipMessage","Promise","resolve","then","describe","message","_tooltipClass","_setTooltipClass","_setupPointerEvents","clearTimeout","_touchstartTimeout","dispose","removeEventListener","listener","clear","complete","stopMonitoring","delay","disabled","_showTimeoutId","_hideTimeoutId","overlayRef","_createOverlay","_detach","_portal","attach","instance","afterHidden","isVisible","scrollableAncestors","getAncestorScrollContainers","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","withScrollableContainers","positionChanges","change","scrollableViewProperties","isOverlayClipped","create","positionStrategy","panelClass","detachments","hasAttached","detach","getConfig","_getOrigin","_getOverlayPosition","withPositions","Object","assign","main","fallback","isLtr","originPosition","originX","originY","x","y","_invertPosition","overlayPosition","overlayX","overlayY","_markForCheck","onMicrotaskEmpty","asObservable","take","tooltipClass","IOS","ANDROID","_disableNativeGesturesIfNecessary","touchendListener","set","setTimeout","gestures","nodeName","userSelect","msUserSelect","webkitUserSelect","MozUserSelect","draggable","webkitUserDrag","touchAction","webkitTapHighlightColor","ɵdir","TooltipComponent","_changeDetectorRef","_breakpointObserver","_visibility","_closeOnInteraction","_onHide","_isHandset","observe","Handset","toState","markForCheck","_handleBodyInteraction","_animationStart","$event","_animationDone","tmp_0_0","currVal_0","matches","pipes","data","animation","MatTooltipModule","providers","SampleTimeOperator","period","scheduler","subscriber","source","Subscriber","destination","hasValue","add","schedule","dispatchNotification","lastValue","state","notifyNext","resolveContainerElement","selector","scrollWindow","defaultElement","fromRoot","hasWindow","window","document","documentElement","container","customRoot","querySelector","findElement","inputPropChanged","prop","firstChange","VerticalProps","clientHeight","offsetHeight","scrollHeight","pageYOffset","offsetTop","scrollTop","top","HorizontalProps","AxisResolver","vertical","propsMap","isElementWindow","windowElement","some","obj","prototype","toString","call","includes","getDocumentElement","isContainerWindow","calculatePoints","resolver","height","isWindow","axis","offsetHeightKey","clientHeightKey","extractHeightPropKeys","getElementHeight","extractHeightForElement","scrolled","getElementPageYOffset","nativeElementHeight","totalToScroll","elem","topKey","getBoundingClientRect","getElementOffsetTop","calculatePointsForWindow","scrollTopKey","scrollHeightKey","calculatePointsForElement","isNaN","docElem","pageYOffsetKey","offsetTopKey","ownerDocument","defaultView","shouldFireScrollEvent","distance","scrollingDown","remaining","containerBreakpoint","scrolledUntilNow","down","up","ScrollState","lastScrollPosition","lastTotalToScroll","triggered","updateScrollPosition","updateTotalToScroll","scroll","isScrollingDown","toInfiniteScrollAction","response","scrollDown","stats","currentScrollPosition","payload","InfiniteScrollDirective","zone","scrolledUp","infiniteScrollDistance","infiniteScrollUpDistance","infiniteScrollThrottle","infiniteScrollDisabled","infiniteScrollContainer","immediateCheck","horizontal","alwaysCallback","setup","containerChanged","disabledChanged","distanceChanged","shouldSetup","currentValue","destroyScroller","disposeScroller","config","scrollContainer","createResolverWithContainer","createResolver","scrollState","upDistance","downDistance","options","obs","throttle","lift","sampleTime","attachScrollEvent","mergeMap","of","positionStats","fire","isScrollingDownwards","getScrollStats","toInfiniteScrollParams","tap","updateScroll","isTriggeredCurrentTotal","shouldTriggerEvents","isTriggeredScroll","updateTriggeredFlag","createScroller","disable","handleOnScroll","emit","InfiniteScrollModule","SliderComponent","changeDetector","slider","detectChanges","console","log","parentRect","getClientRects","child","from","children","reverse","right","left","scrollIntoView","behavior","block","more","HomeComponent","apiService","authService","router","myMedia","continueWatching","latestMovies","loaded","all","loadViews","loadStarted","loadLatest","createUrlTree","get","userId","resp","item","Items","subtitle","Name","CollectionType","ImageTags","Primary","image","assembleUrl","Id","tag","quality","maxWidth","maxHeight","push","toPromise","query","Limit","Recursive","ImageTypeLimit","EnableImageTypes","EnableTotalRecordCount","MediaTypes","title","cut","sliceTitle","year","Date","PremiereDate","getFullYear","originalTitle","progress","UserData","PlayedPercentage","BackdropImageTags","keys","imageType","EnableImageType","PemiereDate","space","slice","lastIndexOf","Order","SortAttributes","routes","component","MoviesComponent","sortAttr","SORT_NAME","sortOrder","ASCENDING","imageTypes","SortBy","SortOrder","IncludeItemTypes","Fields","join","StartIndex","movies","getFirstImageLocation","base","loadMore","ShellRoutingModule","forChild","ShellModule"],"mappings":"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","file":"4.14c85757481f953edec5.js","sourcesContent":["import { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Optional, Inject, Input, ContentChildren, Directive, NgModule } from '@angular/core';\nimport { setLines, MatLine, MatLineModule, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-base.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/bidi';\n\nconst _c0 = [\"*\"];\nconst _c1 = [[[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], [[\"\", \"mat-line\", \"\"], [\"\", \"matLine\", \"\"]], \"*\"];\nconst _c2 = [\"[mat-grid-avatar], [matGridAvatar]\", \"[mat-line], [matLine]\", \"*\"];\nconst MAT_GRID_LIST = new InjectionToken('MAT_GRID_LIST');\n/**\n * Base interface for a `MatGridList`.\n * \\@docs-private\n * @record\n */\nfunction MatGridListBase() { }\nif (false) {\n    /** @type {?} */\n    MatGridListBase.prototype.cols;\n    /** @type {?} */\n    MatGridListBase.prototype.gutterSize;\n    /** @type {?} */\n    MatGridListBase.prototype.rowHeight;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-tile.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridTile {\n    /**\n     * @param {?} _element\n     * @param {?=} _gridList\n     */\n    constructor(_element, _gridList) {\n        this._element = _element;\n        this._gridList = _gridList;\n        this._rowspan = 1;\n        this._colspan = 1;\n    }\n    /**\n     * Amount of rows that the grid tile takes up.\n     * @return {?}\n     */\n    get rowspan() { return this._rowspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowspan(value) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Amount of columns that the grid tile takes up.\n     * @return {?}\n     */\n    get colspan() { return this._colspan; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set colspan(value) { this._colspan = Math.round(coerceNumberProperty(value)); }\n    /**\n     * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n     * \"Changed after checked\" errors that would occur with HostBinding.\n     * @param {?} property\n     * @param {?} value\n     * @return {?}\n     */\n    _setStyle(property, value) {\n        ((/** @type {?} */ (this._element.nativeElement.style)))[property] = value;\n    }\n}\nMatGridTile.ɵfac = function MatGridTile_Factory(t) { return new (t || MatGridTile)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_GRID_LIST, 8)); };\nMatGridTile.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTile, selectors: [[\"mat-grid-tile\"]], hostAttrs: [1, \"mat-grid-tile\"], hostVars: 2, hostBindings: function MatGridTile_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"rowspan\", ctx.rowspan)(\"colspan\", ctx.colspan);\n    } }, inputs: { rowspan: \"rowspan\", colspan: \"colspan\" }, exportAs: [\"matGridTile\"], ngContentSelectors: _c0, decls: 2, vars: 0, consts: [[1, \"mat-figure\"]], template: function MatGridTile_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"figure\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTile.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_GRID_LIST,] }] }\n];\nMatGridTile.propDecorators = {\n    rowspan: [{ type: Input }],\n    colspan: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTile, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile',\n                exportAs: 'matGridTile',\n                host: {\n                    'class': 'mat-grid-tile',\n                    // Ensures that the \"rowspan\" and \"colspan\" input value is reflected in\n                    // the DOM. This is needed for the grid-tile harness.\n                    '[attr.rowspan]': 'rowspan',\n                    '[attr.colspan]': 'colspan'\n                },\n                template: \"<!-- TODO(kara): Revisit why this is a figure.-->\\n<figure class=\\\"mat-figure\\\">\\n  <ng-content></ng-content>\\n</figure>\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_GRID_LIST]\n            }] }]; }, { rowspan: [{\n            type: Input\n        }], colspan: [{\n            type: Input\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_rowspan;\n    /** @type {?} */\n    MatGridTile.ngAcceptInputType_colspan;\n    /** @type {?} */\n    MatGridTile.prototype._rowspan;\n    /** @type {?} */\n    MatGridTile.prototype._colspan;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTile.prototype._element;\n    /** @type {?} */\n    MatGridTile.prototype._gridList;\n}\nclass MatGridTileText {\n    /**\n     * @param {?} _element\n     */\n    constructor(_element) {\n        this._element = _element;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterContentInit() {\n        setLines(this._lines, this._element);\n    }\n}\nMatGridTileText.ɵfac = function MatGridTileText_Factory(t) { return new (t || MatGridTileText)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nMatGridTileText.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridTileText, selectors: [[\"mat-grid-tile-header\"], [\"mat-grid-tile-footer\"]], contentQueries: function MatGridTileText_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatLine, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lines = _t);\n    } }, ngContentSelectors: _c2, decls: 4, vars: 0, consts: [[1, \"mat-grid-list-text\"]], template: function MatGridTileText_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(3, 2);\n    } }, encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridTileText.ctorParameters = () => [\n    { type: ElementRef }\n];\nMatGridTileText.propDecorators = {\n    _lines: [{ type: ContentChildren, args: [MatLine, { descendants: true },] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileText, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n                template: \"<ng-content select=\\\"[mat-grid-avatar], [matGridAvatar]\\\"></ng-content>\\n<div class=\\\"mat-grid-list-text\\\"><ng-content select=\\\"[mat-line], [matLine]\\\"></ng-content></div>\\n<ng-content></ng-content>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { _lines: [{\n            type: ContentChildren,\n            args: [MatLine, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridTileText.prototype._lines;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridTileText.prototype._element;\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridAvatarCssMatStyler {\n}\nMatGridAvatarCssMatStyler.ɵfac = function MatGridAvatarCssMatStyler_Factory(t) { return new (t || MatGridAvatarCssMatStyler)(); };\nMatGridAvatarCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridAvatarCssMatStyler, selectors: [[\"\", \"mat-grid-avatar\", \"\"], [\"\", \"matGridAvatar\", \"\"]], hostAttrs: [1, \"mat-grid-avatar\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridAvatarCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-grid-avatar], [matGridAvatar]',\n                host: { 'class': 'mat-grid-avatar' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileHeaderCssMatStyler {\n}\nMatGridTileHeaderCssMatStyler.ɵfac = function MatGridTileHeaderCssMatStyler_Factory(t) { return new (t || MatGridTileHeaderCssMatStyler)(); };\nMatGridTileHeaderCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileHeaderCssMatStyler, selectors: [[\"mat-grid-tile-header\"]], hostAttrs: [1, \"mat-grid-tile-header\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileHeaderCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-header',\n                host: { 'class': 'mat-grid-tile-header' }\n            }]\n    }], null, null); })();\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * \\@docs-private\n */\nclass MatGridTileFooterCssMatStyler {\n}\nMatGridTileFooterCssMatStyler.ɵfac = function MatGridTileFooterCssMatStyler_Factory(t) { return new (t || MatGridTileFooterCssMatStyler)(); };\nMatGridTileFooterCssMatStyler.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatGridTileFooterCssMatStyler, selectors: [[\"mat-grid-tile-footer\"]], hostAttrs: [1, \"mat-grid-tile-footer\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridTileFooterCssMatStyler, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-grid-tile-footer',\n                host: { 'class': 'mat-grid-tile-footer' }\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-coordinator.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Interface describing a tile.\n * \\@docs-private\n * @record\n */\nfunction Tile() { }\nif (false) {\n    /**\n     * Amount of rows that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.rowspan;\n    /**\n     * Amount of columns that the tile takes up.\n     * @type {?}\n     */\n    Tile.prototype.colspan;\n}\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * \\@docs-private\n */\nclass TileCoordinator {\n    constructor() {\n        /**\n         * Index at which the search for the next gap will start.\n         */\n        this.columnIndex = 0;\n        /**\n         * The current row index.\n         */\n        this.rowIndex = 0;\n    }\n    /**\n     * Gets the total number of rows occupied by tiles\n     * @return {?}\n     */\n    get rowCount() { return this.rowIndex + 1; }\n    /**\n     * Gets the total span of rows occupied by tiles.\n     * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n     * @return {?}\n     */\n    get rowspan() {\n        /** @type {?} */\n        const lastRowMax = Math.max(...this.tracker);\n        // if any of the tiles has a rowspan that pushes it beyond the total row count,\n        // add the difference to the rowcount\n        return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n    }\n    /**\n     * Updates the tile positions.\n     * @param {?} numColumns Amount of columns in the grid.\n     * @param {?} tiles Tiles to be positioned.\n     * @return {?}\n     */\n    update(numColumns, tiles) {\n        this.columnIndex = 0;\n        this.rowIndex = 0;\n        this.tracker = new Array(numColumns);\n        this.tracker.fill(0, 0, this.tracker.length);\n        this.positions = tiles.map((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => this._trackTile(tile)));\n    }\n    /**\n     * Calculates the row and col position of a tile.\n     * @private\n     * @param {?} tile\n     * @return {?}\n     */\n    _trackTile(tile) {\n        // Find a gap large enough for this tile.\n        /** @type {?} */\n        const gapStartIndex = this._findMatchingGap(tile.colspan);\n        // Place tile in the resulting gap.\n        this._markTilePosition(gapStartIndex, tile);\n        // The next time we look for a gap, the search will start at columnIndex, which should be\n        // immediately after the tile that has just been placed.\n        this.columnIndex = gapStartIndex + tile.colspan;\n        return new TilePosition(this.rowIndex, gapStartIndex);\n    }\n    /**\n     * Finds the next available space large enough to fit the tile.\n     * @private\n     * @param {?} tileCols\n     * @return {?}\n     */\n    _findMatchingGap(tileCols) {\n        if (tileCols > this.tracker.length) {\n            throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                `grid with cols=\"${this.tracker.length}\".`);\n        }\n        // Start index is inclusive, end index is exclusive.\n        /** @type {?} */\n        let gapStartIndex = -1;\n        /** @type {?} */\n        let gapEndIndex = -1;\n        // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n        do {\n            // If we've reached the end of the row, go to the next row.\n            if (this.columnIndex + tileCols > this.tracker.length) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n            // If there are no more empty spaces in this row at all, move on to the next row.\n            if (gapStartIndex == -1) {\n                this._nextRow();\n                gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n                gapEndIndex = this._findGapEndIndex(gapStartIndex);\n                continue;\n            }\n            gapEndIndex = this._findGapEndIndex(gapStartIndex);\n            // If a gap large enough isn't found, we want to start looking immediately after the current\n            // gap on the next iteration.\n            this.columnIndex = gapStartIndex + 1;\n            // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n            // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n        } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n        // If we still didn't manage to find a gap, ensure that the index is\n        // at least zero so the tile doesn't get pulled out of the grid.\n        return Math.max(gapStartIndex, 0);\n    }\n    /**\n     * Move \"down\" to the next row.\n     * @private\n     * @return {?}\n     */\n    _nextRow() {\n        this.columnIndex = 0;\n        this.rowIndex++;\n        // Decrement all spaces by one to reflect moving down one row.\n        for (let i = 0; i < this.tracker.length; i++) {\n            this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n        }\n    }\n    /**\n     * Finds the end index (exclusive) of a gap given the index from which to start looking.\n     * The gap ends when a non-zero value is found.\n     * @private\n     * @param {?} gapStartIndex\n     * @return {?}\n     */\n    _findGapEndIndex(gapStartIndex) {\n        for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n            if (this.tracker[i] != 0) {\n                return i;\n            }\n        }\n        // The gap ends with the end of the row.\n        return this.tracker.length;\n    }\n    /**\n     * Update the tile tracker to account for the given tile in the given space.\n     * @private\n     * @param {?} start\n     * @param {?} tile\n     * @return {?}\n     */\n    _markTilePosition(start, tile) {\n        for (let i = 0; i < tile.colspan; i++) {\n            this.tracker[start + i] = tile.rowspan;\n        }\n    }\n}\nif (false) {\n    /**\n     * Tracking array (see class description).\n     * @type {?}\n     */\n    TileCoordinator.prototype.tracker;\n    /**\n     * Index at which the search for the next gap will start.\n     * @type {?}\n     */\n    TileCoordinator.prototype.columnIndex;\n    /**\n     * The current row index.\n     * @type {?}\n     */\n    TileCoordinator.prototype.rowIndex;\n    /**\n     * The computed (row, col) position of each tile (the output).\n     * @type {?}\n     */\n    TileCoordinator.prototype.positions;\n}\n/**\n * Simple data structure for tile position (row, col).\n * \\@docs-private\n */\nclass TilePosition {\n    /**\n     * @param {?} row\n     * @param {?} col\n     */\n    constructor(row, col) {\n        this.row = row;\n        this.col = col;\n    }\n}\nif (false) {\n    /** @type {?} */\n    TilePosition.prototype.row;\n    /** @type {?} */\n    TilePosition.prototype.col;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/tile-styler.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n * @type {?}\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * \\@docs-private\n * @abstract\n */\nclass TileStyler {\n    constructor() {\n        this._rows = 0;\n        this._rowspan = 0;\n    }\n    /**\n     * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n     * because these properties haven't been calculated by that point.\n     *\n     * @param {?} gutterSize Size of the grid's gutter.\n     * @param {?} tracker Instance of the TileCoordinator.\n     * @param {?} cols Amount of columns in the grid.\n     * @param {?} direction Layout direction of the grid.\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        this._gutterSize = normalizeUnits(gutterSize);\n        this._rows = tracker.rowCount;\n        this._rowspan = tracker.rowspan;\n        this._cols = cols;\n        this._direction = direction;\n    }\n    /**\n     * Computes the amount of space a single 1x1 tile would take up (width or height).\n     * Used as a basis for other calculations.\n     * @param {?} sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n     * @param {?} gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n     * @return {?} The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n     */\n    getBaseTileSize(sizePercent, gutterFraction) {\n        // Take the base size percent (as would be if evenly dividing the size between cells),\n        // and then subtracting the size of one gutter. However, since there are no gutters on the\n        // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n        // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n        // edge evenly among the cells).\n        return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n    }\n    /**\n     * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} offset Number of tiles that have already been rendered in the row/column.\n     * @return {?} Position of the tile as a CSS calc() expression.\n     */\n    getTilePosition(baseSize, offset) {\n        // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n        // row/column (offset).\n        return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n    }\n    /**\n     * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n     * @param {?} baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n     * @param {?} span The tile's rowspan or colspan.\n     * @return {?} Size of the tile as a CSS calc() expression.\n     */\n    getTileSize(baseSize, span) {\n        return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n    }\n    /**\n     * Sets the style properties to be applied to a tile for the given row and column index.\n     * @param {?} tile Tile to which to apply the styling.\n     * @param {?} rowIndex Index of the tile's row.\n     * @param {?} colIndex Index of the tile's column.\n     * @return {?}\n     */\n    setStyle(tile, rowIndex, colIndex) {\n        // Percent of the available horizontal space that one column takes up.\n        /** @type {?} */\n        let percentWidthPerTile = 100 / this._cols;\n        // Fraction of the vertical gutter size that each column takes up.\n        // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n        /** @type {?} */\n        let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n        this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n        this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    }\n    /**\n     * Sets the horizontal placement of the tile in the list.\n     * @param {?} tile\n     * @param {?} colIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setColStyles(tile, colIndex, percentWidth, gutterWidth) {\n        // Base horizontal size of a column.\n        /** @type {?} */\n        let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n        // The width and horizontal position of each tile is always calculated the same way, but the\n        // height and vertical position depends on the rowMode.\n        /** @type {?} */\n        let side = this._direction === 'rtl' ? 'right' : 'left';\n        tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n        tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n    }\n    /**\n     * Calculates the total size taken up by gutters across one axis of a list.\n     * @return {?}\n     */\n    getGutterSpan() {\n        return `${this._gutterSize} * (${this._rowspan} - 1)`;\n    }\n    /**\n     * Calculates the total size taken up by tiles across one axis of a list.\n     * @param {?} tileHeight Height of the tile.\n     * @return {?}\n     */\n    getTileSpan(tileHeight) {\n        return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n    }\n    /**\n     * Calculates the computed height and returns the correct style property to set.\n     * This method can be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @return {?}\n     */\n    getComputedHeight() { return null; }\n}\nif (false) {\n    /** @type {?} */\n    TileStyler.prototype._gutterSize;\n    /** @type {?} */\n    TileStyler.prototype._rows;\n    /** @type {?} */\n    TileStyler.prototype._rowspan;\n    /** @type {?} */\n    TileStyler.prototype._cols;\n    /** @type {?} */\n    TileStyler.prototype._direction;\n    /**\n     * Sets the vertical placement of the tile in the list.\n     * This method will be implemented by each type of TileStyler.\n     * \\@docs-private\n     * @abstract\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    TileStyler.prototype.setRowStyles = function (tile, rowIndex, percentWidth, gutterWidth) { };\n    /**\n     * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n     * \\@docs-private\n     * @abstract\n     * @param {?} list Grid list that the styler was attached to.\n     * @return {?}\n     */\n    TileStyler.prototype.reset = function (list) { };\n}\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * \\@docs-private\n */\nclass FixedTileStyler extends TileStyler {\n    /**\n     * @param {?} fixedRowHeight\n     */\n    constructor(fixedRowHeight) {\n        super();\n        this.fixedRowHeight = fixedRowHeight;\n    }\n    /**\n     * @param {?} gutterSize\n     * @param {?} tracker\n     * @param {?} cols\n     * @param {?} direction\n     * @return {?}\n     */\n    init(gutterSize, tracker, cols, direction) {\n        super.init(gutterSize, tracker, cols, direction);\n        this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n        if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n            throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n        }\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['height', null]);\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\nif (false) {\n    /** @type {?} */\n    FixedTileStyler.prototype.fixedRowHeight;\n}\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * \\@docs-private\n */\nclass RatioTileStyler extends TileStyler {\n    /**\n     * @param {?} value\n     */\n    constructor(value) {\n        super();\n        this._parseRatio(value);\n    }\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @param {?} percentWidth\n     * @param {?} gutterWidth\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex, percentWidth, gutterWidth) {\n        /** @type {?} */\n        let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n        this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n        // Use padding-top and margin-top to maintain the given aspect ratio, as\n        // a percentage-based value for these properties is applied versus the *width* of the\n        // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n        tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n        tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @return {?}\n     */\n    getComputedHeight() {\n        return [\n            'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n        ];\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        list._setListStyle(['paddingBottom', null]);\n        list._tiles.forEach((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => {\n            tile._setStyle('marginTop', null);\n            tile._setStyle('paddingTop', null);\n        }));\n    }\n    /**\n     * @private\n     * @param {?} value\n     * @return {?}\n     */\n    _parseRatio(value) {\n        /** @type {?} */\n        const ratioParts = value.split(':');\n        if (ratioParts.length !== 2) {\n            throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n        }\n        this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n    }\n}\nif (false) {\n    /**\n     * Ratio width:height given by user to determine row height.\n     * @type {?}\n     */\n    RatioTileStyler.prototype.rowHeightRatio;\n    /** @type {?} */\n    RatioTileStyler.prototype.baseTileHeight;\n}\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * \\@docs-private\n */\nclass FitTileStyler extends TileStyler {\n    /**\n     * @param {?} tile\n     * @param {?} rowIndex\n     * @return {?}\n     */\n    setRowStyles(tile, rowIndex) {\n        // Percent of the available vertical space that one row takes up.\n        /** @type {?} */\n        let percentHeightPerTile = 100 / this._rowspan;\n        // Fraction of the horizontal gutter size that each column takes up.\n        /** @type {?} */\n        let gutterHeightPerTile = (this._rows - 1) / this._rows;\n        // Base vertical size of a column.\n        /** @type {?} */\n        let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n        tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n        tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n    }\n    /**\n     * @param {?} list\n     * @return {?}\n     */\n    reset(list) {\n        if (list._tiles) {\n            list._tiles.forEach((/**\n             * @param {?} tile\n             * @return {?}\n             */\n            tile => {\n                tile._setStyle('top', null);\n                tile._setStyle('height', null);\n            }));\n        }\n    }\n}\n/**\n * Wraps a CSS string in a calc function\n * @param {?} exp\n * @return {?}\n */\nfunction calc(exp) {\n    return `calc(${exp})`;\n}\n/**\n * Appends pixels to a CSS string if no units are given.\n * @param {?} value\n * @return {?}\n */\nfunction normalizeUnits(value) {\n    return value.match(/([A-Za-z%]+)$/) ? value : `${value}px`;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n/** @type {?} */\nconst MAT_FIT_MODE = 'fit';\nclass MatGridList {\n    /**\n     * @param {?} _element\n     * @param {?} _dir\n     */\n    constructor(_element, _dir) {\n        this._element = _element;\n        this._dir = _dir;\n        /**\n         * The amount of space between tiles. This will be something like '5px' or '2em'.\n         */\n        this._gutter = '1px';\n    }\n    /**\n     * Amount of columns in the grid list.\n     * @return {?}\n     */\n    get cols() { return this._cols; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set cols(value) {\n        this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n    }\n    /**\n     * Size of the grid list's gutter in pixels.\n     * @return {?}\n     */\n    get gutterSize() { return this._gutter; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set gutterSize(value) { this._gutter = `${value == null ? '' : value}`; }\n    /**\n     * Set internal representation of row height from the user-provided value.\n     * @return {?}\n     */\n    get rowHeight() { return this._rowHeight; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rowHeight(value) {\n        /** @type {?} */\n        const newValue = `${value == null ? '' : value}`;\n        if (newValue !== this._rowHeight) {\n            this._rowHeight = newValue;\n            this._setTileStyler(this._rowHeight);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnInit() {\n        this._checkCols();\n        this._checkRowHeight();\n    }\n    /**\n     * The layout calculation is fairly cheap if nothing changes, so there's little cost\n     * to run it frequently.\n     * @return {?}\n     */\n    ngAfterContentChecked() {\n        this._layoutTiles();\n    }\n    /**\n     * Throw a friendly error if cols property is missing\n     * @private\n     * @return {?}\n     */\n    _checkCols() {\n        if (!this.cols) {\n            throw Error(`mat-grid-list: must pass in number of columns. ` +\n                `Example: <mat-grid-list cols=\"3\">`);\n        }\n    }\n    /**\n     * Default to equal width:height if rowHeight property is missing\n     * @private\n     * @return {?}\n     */\n    _checkRowHeight() {\n        if (!this._rowHeight) {\n            this._setTileStyler('1:1');\n        }\n    }\n    /**\n     * Creates correct Tile Styler subtype based on rowHeight passed in by user\n     * @private\n     * @param {?} rowHeight\n     * @return {?}\n     */\n    _setTileStyler(rowHeight) {\n        if (this._tileStyler) {\n            this._tileStyler.reset(this);\n        }\n        if (rowHeight === MAT_FIT_MODE) {\n            this._tileStyler = new FitTileStyler();\n        }\n        else if (rowHeight && rowHeight.indexOf(':') > -1) {\n            this._tileStyler = new RatioTileStyler(rowHeight);\n        }\n        else {\n            this._tileStyler = new FixedTileStyler(rowHeight);\n        }\n    }\n    /**\n     * Computes and applies the size and position for all children grid tiles.\n     * @private\n     * @return {?}\n     */\n    _layoutTiles() {\n        if (!this._tileCoordinator) {\n            this._tileCoordinator = new TileCoordinator();\n        }\n        /** @type {?} */\n        const tracker = this._tileCoordinator;\n        /** @type {?} */\n        const tiles = this._tiles.filter((/**\n         * @param {?} tile\n         * @return {?}\n         */\n        tile => !tile._gridList || tile._gridList === this));\n        /** @type {?} */\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._tileCoordinator.update(this.cols, tiles);\n        this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n        tiles.forEach((/**\n         * @param {?} tile\n         * @param {?} index\n         * @return {?}\n         */\n        (tile, index) => {\n            /** @type {?} */\n            const pos = tracker.positions[index];\n            this._tileStyler.setStyle(tile, pos.row, pos.col);\n        }));\n        this._setListStyle(this._tileStyler.getComputedHeight());\n    }\n    /**\n     * Sets style on the main grid-list element, given the style name and value.\n     * @param {?} style\n     * @return {?}\n     */\n    _setListStyle(style) {\n        if (style) {\n            ((/** @type {?} */ (this._element.nativeElement.style)))[style[0]] = style[1];\n        }\n    }\n}\nMatGridList.ɵfac = function MatGridList_Factory(t) { return new (t || MatGridList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Directionality, 8)); };\nMatGridList.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatGridList, selectors: [[\"mat-grid-list\"]], contentQueries: function MatGridList_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatGridTile, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._tiles = _t);\n    } }, hostAttrs: [1, \"mat-grid-list\"], hostVars: 1, hostBindings: function MatGridList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"cols\", ctx.cols);\n    } }, inputs: { cols: \"cols\", gutterSize: \"gutterSize\", rowHeight: \"rowHeight\" }, exportAs: [\"matGridList\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_GRID_LIST,\n                useExisting: MatGridList\n            }])], ngContentSelectors: _c0, decls: 2, vars: 0, template: function MatGridList_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\");\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n    } }, styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatGridList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nMatGridList.propDecorators = {\n    _tiles: [{ type: ContentChildren, args: [MatGridTile, { descendants: true },] }],\n    cols: [{ type: Input }],\n    gutterSize: [{ type: Input }],\n    rowHeight: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridList, [{\n        type: Component,\n        args: [{\n                selector: 'mat-grid-list',\n                exportAs: 'matGridList',\n                template: \"<div>\\n  <ng-content></ng-content>\\n</div>\",\n                host: {\n                    'class': 'mat-grid-list',\n                    // Ensures that the \"cols\" input value is reflected in the DOM. This is\n                    // needed for the grid-list harness.\n                    '[attr.cols]': 'cols'\n                },\n                providers: [{\n                        provide: MAT_GRID_LIST,\n                        useExisting: MatGridList\n                    }],\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-grid-list{display:block;position:relative}.mat-grid-tile{display:block;position:absolute;overflow:hidden}.mat-grid-tile .mat-figure{top:0;left:0;right:0;bottom:0;position:absolute;display:flex;align-items:center;justify-content:center;height:100%;padding:0;margin:0}.mat-grid-tile .mat-grid-tile-header,.mat-grid-tile .mat-grid-tile-footer{display:flex;align-items:center;height:48px;color:#fff;background:rgba(0,0,0,.38);overflow:hidden;padding:0 16px;position:absolute;left:0;right:0}.mat-grid-tile .mat-grid-tile-header>*,.mat-grid-tile .mat-grid-tile-footer>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-tile-header.mat-2-line,.mat-grid-tile .mat-grid-tile-footer.mat-2-line{height:68px}.mat-grid-tile .mat-grid-list-text{display:flex;flex-direction:column;width:100%;box-sizing:border-box;overflow:hidden}.mat-grid-tile .mat-grid-list-text>*{margin:0;padding:0;font-weight:normal;font-size:inherit}.mat-grid-tile .mat-grid-list-text:empty{display:none}.mat-grid-tile .mat-grid-tile-header{top:0}.mat-grid-tile .mat-grid-tile-footer{bottom:0}.mat-grid-tile .mat-grid-avatar{padding-right:16px}[dir=rtl] .mat-grid-tile .mat-grid-avatar{padding-right:0;padding-left:16px}.mat-grid-tile .mat-grid-avatar:empty{display:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { cols: [{\n            type: Input\n        }], gutterSize: [{\n            type: Input\n        }], rowHeight: [{\n            type: Input\n        }], _tiles: [{\n            type: ContentChildren,\n            args: [MatGridTile, { descendants: true }]\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatGridList.ngAcceptInputType_cols;\n    /**\n     * Number of columns being rendered.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._cols;\n    /**\n     * Used for determiningthe position of each tile in the grid.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileCoordinator;\n    /**\n     * Row height value passed in by user. This can be one of three types:\n     * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n     * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n     * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._rowHeight;\n    /**\n     * The amount of space between tiles. This will be something like '5px' or '2em'.\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._gutter;\n    /**\n     * Sets position and size styles for a tile\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._tileStyler;\n    /**\n     * Query list of tiles that are being rendered.\n     * @type {?}\n     */\n    MatGridList.prototype._tiles;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._element;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatGridList.prototype._dir;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/grid-list-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatGridListModule {\n}\nMatGridListModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatGridListModule });\nMatGridListModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatGridListModule_Factory(t) { return new (t || MatGridListModule)(); }, imports: [[MatLineModule, MatCommonModule],\n        MatLineModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatGridListModule, { declarations: function () { return [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler]; }, imports: function () { return [MatLineModule, MatCommonModule]; }, exports: function () { return [MatGridList,\n        MatGridTile,\n        MatGridTileText,\n        MatLineModule,\n        MatCommonModule,\n        MatGridTileHeaderCssMatStyler,\n        MatGridTileFooterCssMatStyler,\n        MatGridAvatarCssMatStyler]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatGridListModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatLineModule, MatCommonModule],\n                exports: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatLineModule,\n                    MatCommonModule,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ],\n                declarations: [\n                    MatGridList,\n                    MatGridTile,\n                    MatGridTileText,\n                    MatGridTileHeaderCssMatStyler,\n                    MatGridTileFooterCssMatStyler,\n                    MatGridAvatarCssMatStyler\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/grid-list/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatGridAvatarCssMatStyler, MatGridList, MatGridListModule, MatGridTile, MatGridTileFooterCssMatStyler, MatGridTileHeaderCssMatStyler, MatGridTileText, TileCoordinator as ɵTileCoordinator, MAT_GRID_LIST as ɵangular_material_src_material_grid_list_grid_list_a };\n\n//# sourceMappingURL=grid-list.js.map","import { InjectionToken, inject, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription, fromEvent } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/progress-bar.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Last animation end data.\n * @record\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nconst _c0 = [\"primaryValueBar\"];\nfunction ProgressAnimationEnd() { }\nif (false) {\n    /** @type {?} */\n    ProgressAnimationEnd.prototype.value;\n}\n// Boilerplate for applying mixins to MatProgressBar.\n/**\n * \\@docs-private\n */\nclass MatProgressBarBase {\n    /**\n     * @param {?} _elementRef\n     */\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nif (false) {\n    /** @type {?} */\n    MatProgressBarBase.prototype._elementRef;\n}\n/** @type {?} */\nconst _MatProgressBarMixinBase = mixinColor(MatProgressBarBase, 'primary');\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * \\@docs-private\n * @type {?}\n */\nconst MAT_PROGRESS_BAR_LOCATION = new InjectionToken('mat-progress-bar-location', { providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY });\n/**\n * Stubbed out location for `MatProgressBar`.\n * \\@docs-private\n * @record\n */\nfunction MatProgressBarLocation() { }\nif (false) {\n    /** @type {?} */\n    MatProgressBarLocation.prototype.getPathname;\n}\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_PROGRESS_BAR_LOCATION_FACTORY() {\n    /** @type {?} */\n    const _document = inject(DOCUMENT);\n    /** @type {?} */\n    const _location = _document ? _document.location : null;\n    return {\n        // Note that this needs to be a function, rather than a property, because Angular\n        // will only resolve it once, but we want the current path on each call.\n        getPathname: (/**\n         * @return {?}\n         */\n        () => _location ? (_location.pathname + _location.search) : '')\n    };\n}\n/**\n * Counter used to generate unique IDs for progress bars.\n * @type {?}\n */\nlet progressbarId = 0;\n/**\n * `<mat-progress-bar>` component.\n */\nclass MatProgressBar extends _MatProgressBarMixinBase {\n    /**\n     * @param {?} _elementRef\n     * @param {?} _ngZone\n     * @param {?=} _animationMode\n     * @param {?=} location\n     */\n    constructor(_elementRef, _ngZone, _animationMode, \n    /**\n     * @deprecated `location` parameter to be made required.\n     * @breaking-change 8.0.0\n     */\n    location) {\n        super(_elementRef);\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        /**\n         * Flag that indicates whether NoopAnimations mode is set to true.\n         */\n        this._isNoopAnimation = false;\n        this._value = 0;\n        this._bufferValue = 0;\n        /**\n         * Event emitted when animation of the primary progress bar completes. This event will not\n         * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n         * animations (indeterminate and query).\n         */\n        this.animationEnd = new EventEmitter();\n        /**\n         * Reference to animation end subscription to be unsubscribed on destroy.\n         */\n        this._animationEndSubscription = Subscription.EMPTY;\n        /**\n         * Mode of the progress bar.\n         *\n         * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n         * 'determinate'.\n         * Mirrored to mode attribute.\n         */\n        this.mode = 'determinate';\n        /**\n         * ID of the progress bar.\n         */\n        this.progressbarId = `mat-progress-bar-${progressbarId++}`;\n        // We need to prefix the SVG reference with the current path, otherwise they won't work\n        // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n        // because named route URLs can contain parentheses (see #12338). Also we don't use since\n        // we can't tell the difference between whether\n        // the consumer is using the hash location strategy or not, because `Location` normalizes\n        // both `/#/foo/bar` and `/foo/bar` to the same thing.\n        /** @type {?} */\n        const path = location ? location.getPathname().split('#')[0] : '';\n        this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n        this._isNoopAnimation = _animationMode === 'NoopAnimations';\n    }\n    /**\n     * Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow.\n     * @return {?}\n     */\n    get value() { return this._value; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set value(v) {\n        this._value = clamp(coerceNumberProperty(v) || 0);\n    }\n    /**\n     * Buffer value of the progress bar. Defaults to zero.\n     * @return {?}\n     */\n    get bufferValue() { return this._bufferValue; }\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    set bufferValue(v) { this._bufferValue = clamp(v || 0); }\n    /**\n     * Gets the current transform value for the progress bar's primary indicator.\n     * @return {?}\n     */\n    _primaryTransform() {\n        /** @type {?} */\n        const scale = this.value / 100;\n        return { transform: `scaleX(${scale})` };\n    }\n    /**\n     * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n     * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n     * @return {?}\n     */\n    _bufferTransform() {\n        if (this.mode === 'buffer') {\n            /** @type {?} */\n            const scale = this.bufferValue / 100;\n            return { transform: `scaleX(${scale})` };\n        }\n        return null;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        // Run outside angular so change detection didn't get triggered on every transition end\n        // instead only on the animation that we care about (primary value bar's transitionend)\n        this._ngZone.runOutsideAngular(((/**\n         * @return {?}\n         */\n        () => {\n            /** @type {?} */\n            const element = this._primaryValueBar.nativeElement;\n            this._animationEndSubscription =\n                ((/** @type {?} */ (fromEvent(element, 'transitionend'))))\n                    .pipe(filter(((/**\n                 * @param {?} e\n                 * @return {?}\n                 */\n                (e) => e.target === element))))\n                    .subscribe((/**\n                 * @return {?}\n                 */\n                () => {\n                    if (this.mode === 'determinate' || this.mode === 'buffer') {\n                        this._ngZone.run((/**\n                         * @return {?}\n                         */\n                        () => this.animationEnd.next({ value: this.value })));\n                    }\n                }));\n        })));\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._animationEndSubscription.unsubscribe();\n    }\n}\nMatProgressBar.ɵfac = function MatProgressBar_Factory(t) { return new (t || MatProgressBar)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_BAR_LOCATION, 8)); };\nMatProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatProgressBar, selectors: [[\"mat-progress-bar\"]], viewQuery: function MatProgressBar_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._primaryValueBar = _t.first);\n    } }, hostAttrs: [\"role\", \"progressbar\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", 1, \"mat-progress-bar\"], hostVars: 4, hostBindings: function MatProgressBar_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuenow\", ctx.mode === \"indeterminate\" || ctx.mode === \"query\" ? null : ctx.value)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._isNoopAnimation);\n    } }, inputs: { color: \"color\", mode: \"mode\", value: \"value\", bufferValue: \"bufferValue\" }, outputs: { animationEnd: \"animationEnd\" }, exportAs: [\"matProgressBar\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 9, vars: 4, consts: [[\"width\", \"100%\", \"height\", \"4\", \"focusable\", \"false\", 1, \"mat-progress-bar-background\", \"mat-progress-bar-element\"], [\"x\", \"4\", \"y\", \"0\", \"width\", \"8\", \"height\", \"4\", \"patternUnits\", \"userSpaceOnUse\", 3, \"id\"], [\"cx\", \"2\", \"cy\", \"2\", \"r\", \"2\"], [\"width\", \"100%\", \"height\", \"100%\"], [1, \"mat-progress-bar-buffer\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [1, \"mat-progress-bar-primary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\", 3, \"ngStyle\"], [\"primaryValueBar\", \"\"], [1, \"mat-progress-bar-secondary\", \"mat-progress-bar-fill\", \"mat-progress-bar-element\"]], template: function MatProgressBar_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"defs\");\n        ɵngcc0.ɵɵelementStart(2, \"pattern\", 1);\n        ɵngcc0.ɵɵelement(3, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"rect\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(5, \"div\", 4);\n        ɵngcc0.ɵɵelement(6, \"div\", 5, 6);\n        ɵngcc0.ɵɵelement(8, \"div\", 7);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.progressbarId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"fill\", ctx._rectangleFillValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._bufferTransform());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._primaryTransform());\n    } }, directives: [ɵngcc1.NgStyle], styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"], encapsulation: 2, changeDetection: 0 });\n/** @nocollapse */\nMatProgressBar.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_PROGRESS_BAR_LOCATION,] }] }\n];\nMatProgressBar.propDecorators = {\n    value: [{ type: Input }],\n    bufferValue: [{ type: Input }],\n    _primaryValueBar: [{ type: ViewChild, args: ['primaryValueBar',] }],\n    animationEnd: [{ type: Output }],\n    mode: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBar, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-bar',\n                exportAs: 'matProgressBar',\n                host: {\n                    'role': 'progressbar',\n                    'aria-valuemin': '0',\n                    'aria-valuemax': '100',\n                    '[attr.aria-valuenow]': '(mode === \"indeterminate\" || mode === \"query\") ? null : value',\n                    '[attr.mode]': 'mode',\n                    'class': 'mat-progress-bar',\n                    '[class._mat-animation-noopable]': '_isNoopAnimation'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  The background div is named as such because it appears below the other divs and is not sized based\\n  on values.\\n-->\\n<svg width=\\\"100%\\\" height=\\\"4\\\" focusable=\\\"false\\\" class=\\\"mat-progress-bar-background mat-progress-bar-element\\\">\\n  <defs>\\n    <pattern [id]=\\\"progressbarId\\\" x=\\\"4\\\" y=\\\"0\\\" width=\\\"8\\\" height=\\\"4\\\" patternUnits=\\\"userSpaceOnUse\\\">\\n      <circle cx=\\\"2\\\" cy=\\\"2\\\" r=\\\"2\\\"/>\\n    </pattern>\\n  </defs>\\n  <rect [attr.fill]=\\\"_rectangleFillValue\\\" width=\\\"100%\\\" height=\\\"100%\\\"/>\\n</svg>\\n<div class=\\\"mat-progress-bar-buffer mat-progress-bar-element\\\" [ngStyle]=\\\"_bufferTransform()\\\"></div>\\n<div class=\\\"mat-progress-bar-primary mat-progress-bar-fill mat-progress-bar-element\\\" [ngStyle]=\\\"_primaryTransform()\\\" #primaryValueBar></div>\\n<div class=\\\"mat-progress-bar-secondary mat-progress-bar-fill mat-progress-bar-element\\\"></div>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:\\\"\\\";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_PROGRESS_BAR_LOCATION]\n            }] }]; }, { animationEnd: [{\n            type: Output\n        }], mode: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], bufferValue: [{\n            type: Input\n        }], _primaryValueBar: [{\n            type: ViewChild,\n            args: ['primaryValueBar']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatProgressBar.ngAcceptInputType_value;\n    /**\n     * Flag that indicates whether NoopAnimations mode is set to true.\n     * @type {?}\n     */\n    MatProgressBar.prototype._isNoopAnimation;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._value;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._bufferValue;\n    /** @type {?} */\n    MatProgressBar.prototype._primaryValueBar;\n    /**\n     * Event emitted when animation of the primary progress bar completes. This event will not\n     * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n     * animations (indeterminate and query).\n     * @type {?}\n     */\n    MatProgressBar.prototype.animationEnd;\n    /**\n     * Reference to animation end subscription to be unsubscribed on destroy.\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._animationEndSubscription;\n    /**\n     * Mode of the progress bar.\n     *\n     * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n     * 'determinate'.\n     * Mirrored to mode attribute.\n     * @type {?}\n     */\n    MatProgressBar.prototype.mode;\n    /**\n     * ID of the progress bar.\n     * @type {?}\n     */\n    MatProgressBar.prototype.progressbarId;\n    /**\n     * Attribute to be used for the `fill` attribute on the internal `rect` element.\n     * @type {?}\n     */\n    MatProgressBar.prototype._rectangleFillValue;\n    /** @type {?} */\n    MatProgressBar.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatProgressBar.prototype._ngZone;\n    /** @type {?} */\n    MatProgressBar.prototype._animationMode;\n}\n/**\n * Clamps a value to be between two numbers, by default 0 and 100.\n * @param {?} v\n * @param {?=} min\n * @param {?=} max\n * @return {?}\n */\nfunction clamp(v, min = 0, max = 100) {\n    return Math.max(min, Math.min(max, v));\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/progress-bar-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatProgressBarModule {\n}\nMatProgressBarModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatProgressBarModule });\nMatProgressBarModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatProgressBarModule_Factory(t) { return new (t || MatProgressBarModule)(); }, imports: [[CommonModule, MatCommonModule],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressBarModule, { declarations: function () { return [MatProgressBar]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatProgressBar,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatProgressBarModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatProgressBar, MatCommonModule],\n                declarations: [MatProgressBar]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/progress-bar/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_BAR_LOCATION, MAT_PROGRESS_BAR_LOCATION_FACTORY, MatProgressBar, MatProgressBarModule };\n\n//# sourceMappingURL=progress-bar.js.map","import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { AriaDescriber, FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, ElementRef, ViewContainerRef, NgZone, Inject, Optional, Input, Component, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { normalizePassiveListenerOptions, Platform } from '@angular/cdk/platform';\nimport { ComponentPortal } from '@angular/cdk/portal';\nimport { ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { Subject } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate, keyframes } from '@angular/animations';\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip-animations.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Animations used by MatTooltip.\n * \\@docs-private\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/overlay';\nimport * as ɵngcc2 from '@angular/cdk/scrolling';\nimport * as ɵngcc3 from '@angular/cdk/platform';\nimport * as ɵngcc4 from '@angular/cdk/a11y';\nimport * as ɵngcc5 from '@angular/cdk/bidi';\nimport * as ɵngcc6 from '@angular/cdk/layout';\nimport * as ɵngcc7 from '@angular/common';\nconst matTooltipAnimations = {\n    /**\n     * Animation that transitions a tooltip in and out.\n     */\n    tooltipState: trigger('state', [\n        state('initial, void, hidden', style({ opacity: 0, transform: 'scale(0)' })),\n        state('visible', style({ transform: 'scale(1)' })),\n        transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n            style({ opacity: 0, transform: 'scale(0)', offset: 0 }),\n            style({ opacity: 0.5, transform: 'scale(0.99)', offset: 0.5 }),\n            style({ opacity: 1, transform: 'scale(1)', offset: 1 })\n        ]))),\n        transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Time in ms to throttle repositioning after scroll events.\n * @type {?}\n */\nconst SCROLL_THROTTLE_MS = 20;\n/**\n * CSS class that will be attached to the overlay panel.\n * @type {?}\n */\nconst TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n/**\n * Options used to bind passive event listeners.\n * @type {?}\n */\nconst passiveListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Time between the user putting the pointer on a tooltip\n * trigger and the long press event being fired.\n * @type {?}\n */\nconst LONGPRESS_DELAY = 500;\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * \\@docs-private\n * @param {?} position\n * @return {?}\n */\nfunction getMatTooltipInvalidPositionError(position) {\n    return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n/**\n * Injection token that determines the scroll handling while a tooltip is visible.\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken('mat-tooltip-scroll-strategy');\n/**\n * \\@docs-private\n * @param {?} overlay\n * @return {?}\n */\nfunction MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {\n    return (/**\n     * @return {?}\n     */\n    () => overlay.scrollStrategies.reposition({ scrollThrottle: SCROLL_THROTTLE_MS }));\n}\n/**\n * \\@docs-private\n * @type {?}\n */\nconst MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Default `matTooltip` options that can be overridden.\n * @record\n */\nfunction MatTooltipDefaultOptions() { }\nif (false) {\n    /** @type {?} */\n    MatTooltipDefaultOptions.prototype.showDelay;\n    /** @type {?} */\n    MatTooltipDefaultOptions.prototype.hideDelay;\n    /** @type {?} */\n    MatTooltipDefaultOptions.prototype.touchendHideDelay;\n    /** @type {?|undefined} */\n    MatTooltipDefaultOptions.prototype.touchGestures;\n    /** @type {?|undefined} */\n    MatTooltipDefaultOptions.prototype.position;\n}\n/**\n * Injection token to be used to override the default options for `matTooltip`.\n * @type {?}\n */\nconst MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken('mat-tooltip-default-options', {\n    providedIn: 'root',\n    factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * \\@docs-private\n * @return {?}\n */\nfunction MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        showDelay: 0,\n        hideDelay: 0,\n        touchendHideDelay: 1500,\n    };\n}\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\nclass MatTooltip {\n    /**\n     * @param {?} _overlay\n     * @param {?} _elementRef\n     * @param {?} _scrollDispatcher\n     * @param {?} _viewContainerRef\n     * @param {?} _ngZone\n     * @param {?} _platform\n     * @param {?} _ariaDescriber\n     * @param {?} _focusMonitor\n     * @param {?} scrollStrategy\n     * @param {?} _dir\n     * @param {?} _defaultOptions\n     * @param {?=} _hammerLoader\n     */\n    constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, \n    /**\n     * @deprecated _hammerLoader parameter to be removed.\n     * @breaking-change 9.0.0\n     */\n    // Note that we need to give Angular something to inject here so it doesn't throw.\n    _hammerLoader) {\n        this._overlay = _overlay;\n        this._elementRef = _elementRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._viewContainerRef = _viewContainerRef;\n        this._ngZone = _ngZone;\n        this._platform = _platform;\n        this._ariaDescriber = _ariaDescriber;\n        this._focusMonitor = _focusMonitor;\n        this._dir = _dir;\n        this._defaultOptions = _defaultOptions;\n        this._position = 'below';\n        this._disabled = false;\n        /**\n         * The default delay in ms before showing the tooltip after show is called\n         */\n        this.showDelay = this._defaultOptions.showDelay;\n        /**\n         * The default delay in ms before hiding the tooltip after hide is called\n         */\n        this.hideDelay = this._defaultOptions.hideDelay;\n        /**\n         * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n         * uses a long press gesture to show and hide, however it can conflict with the native browser\n         * gestures. To work around the conflict, Angular Material disables native gestures on the\n         * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n         * elements). The different values for this option configure the touch event handling as follows:\n         * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n         *   browser gestures on particular elements. In particular, it allows text selection on inputs\n         *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n         * - `on` - Enables touch gestures for all elements and disables native\n         *   browser gestures with no exceptions.\n         * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n         *   showing on touch devices.\n         */\n        this.touchGestures = 'auto';\n        this._message = '';\n        /**\n         * Manually-bound passive event listeners.\n         */\n        this._passiveListeners = new Map();\n        /**\n         * Emits when the component is destroyed.\n         */\n        this._destroyed = new Subject();\n        /**\n         * Handles the keydown events on the host element.\n         * Needs to be an arrow function so that we can use it in addEventListener.\n         */\n        this._handleKeydown = (/**\n         * @param {?} event\n         * @return {?}\n         */\n        (event) => {\n            if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this._ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.hide(0)));\n            }\n        });\n        this._scrollStrategy = scrollStrategy;\n        if (_defaultOptions) {\n            if (_defaultOptions.position) {\n                this.position = _defaultOptions.position;\n            }\n            if (_defaultOptions.touchGestures) {\n                this.touchGestures = _defaultOptions.touchGestures;\n            }\n        }\n        _focusMonitor.monitor(_elementRef)\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @param {?} origin\n         * @return {?}\n         */\n        origin => {\n            // Note that the focus monitor runs outside the Angular zone.\n            if (!origin) {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.hide(0)));\n            }\n            else if (origin === 'keyboard') {\n                _ngZone.run((/**\n                 * @return {?}\n                 */\n                () => this.show()));\n            }\n        }));\n        _ngZone.runOutsideAngular((/**\n         * @return {?}\n         */\n        () => {\n            _elementRef.nativeElement.addEventListener('keydown', this._handleKeydown);\n        }));\n    }\n    /**\n     * Allows the user to define the position of the tooltip relative to the parent element\n     * @return {?}\n     */\n    get position() { return this._position; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set position(value) {\n        if (value !== this._position) {\n            this._position = value;\n            if (this._overlayRef) {\n                this._updatePosition();\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._tooltipInstance)).show(0);\n                }\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    /**\n     * Disables the display of the tooltip.\n     * @return {?}\n     */\n    get disabled() { return this._disabled; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // If tooltip is disabled, hide immediately.\n        if (this._disabled) {\n            this.hide(0);\n        }\n    }\n    /**\n     * The message to be displayed in the tooltip\n     * @return {?}\n     */\n    get message() { return this._message; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set message(value) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n        // If the message is not a string (e.g. number), convert it to a string and trim it.\n        this._message = value != null ? `${value}`.trim() : '';\n        if (!this._message && this._isTooltipVisible()) {\n            this.hide(0);\n        }\n        else {\n            this._updateTooltipMessage();\n            this._ngZone.runOutsideAngular((/**\n             * @return {?}\n             */\n            () => {\n                // The `AriaDescriber` has some functionality that avoids adding a description if it's the\n                // same as the `aria-label` of an element, however we can't know whether the tooltip trigger\n                // has a data-bound `aria-label` or when it'll be set for the first time. We can avoid the\n                // issue by deferring the description by a tick so Angular has time to set the `aria-label`.\n                Promise.resolve().then((/**\n                 * @return {?}\n                 */\n                () => {\n                    this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n                }));\n            }));\n        }\n    }\n    /**\n     * Classes to be passed to the tooltip. Supports the same syntax as `ngClass`.\n     * @return {?}\n     */\n    get tooltipClass() { return this._tooltipClass; }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set tooltipClass(value) {\n        this._tooltipClass = value;\n        if (this._tooltipInstance) {\n            this._setTooltipClass(this._tooltipClass);\n        }\n    }\n    /**\n     * Setup styling-specific things\n     * @return {?}\n     */\n    ngOnInit() {\n        // This needs to happen in `ngOnInit` so the initial values for all inputs have been set.\n        this._setupPointerEvents();\n    }\n    /**\n     * Dispose the tooltip when destroyed.\n     * @return {?}\n     */\n    ngOnDestroy() {\n        /** @type {?} */\n        const nativeElement = this._elementRef.nativeElement;\n        clearTimeout(this._touchstartTimeout);\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._tooltipInstance = null;\n        }\n        // Clean up the event listeners set in the constructor\n        nativeElement.removeEventListener('keydown', this._handleKeydown);\n        this._passiveListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => {\n            nativeElement.removeEventListener(event, listener, passiveListenerOptions);\n        }));\n        this._passiveListeners.clear();\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._ariaDescriber.removeDescription(nativeElement, this.message);\n        this._focusMonitor.stopMonitoring(nativeElement);\n    }\n    /**\n     * Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    show(delay = this.showDelay) {\n        if (this.disabled || !this.message || (this._isTooltipVisible() &&\n            !(/** @type {?} */ (this._tooltipInstance))._showTimeoutId && !(/** @type {?} */ (this._tooltipInstance))._hideTimeoutId)) {\n            return;\n        }\n        /** @type {?} */\n        const overlayRef = this._createOverlay();\n        this._detach();\n        this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n        this._tooltipInstance = overlayRef.attach(this._portal).instance;\n        this._tooltipInstance.afterHidden()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        this._setTooltipClass(this._tooltipClass);\n        this._updateTooltipMessage();\n        (/** @type {?} */ (this._tooltipInstance)).show(delay);\n    }\n    /**\n     * Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input\n     * @param {?=} delay\n     * @return {?}\n     */\n    hide(delay = this.hideDelay) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.hide(delay);\n        }\n    }\n    /**\n     * Shows/hides the tooltip\n     * @return {?}\n     */\n    toggle() {\n        this._isTooltipVisible() ? this.hide() : this.show();\n    }\n    /**\n     * Returns true if the tooltip is currently visible to the user\n     * @return {?}\n     */\n    _isTooltipVisible() {\n        return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n    }\n    /**\n     * Create the overlay config and position strategy\n     * @private\n     * @return {?}\n     */\n    _createOverlay() {\n        if (this._overlayRef) {\n            return this._overlayRef;\n        }\n        /** @type {?} */\n        const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);\n        // Create connected position strategy that listens for scroll events to reposition.\n        /** @type {?} */\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._elementRef)\n            .withTransformOriginOn('.mat-tooltip')\n            .withFlexibleDimensions(false)\n            .withViewportMargin(8)\n            .withScrollableContainers(scrollableAncestors);\n        strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((/**\n         * @param {?} change\n         * @return {?}\n         */\n        change => {\n            if (this._tooltipInstance) {\n                if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n                    // After position changes occur and the overlay is clipped by\n                    // a parent scrollable then close the tooltip.\n                    this._ngZone.run((/**\n                     * @return {?}\n                     */\n                    () => this.hide(0)));\n                }\n            }\n        }));\n        this._overlayRef = this._overlay.create({\n            direction: this._dir,\n            positionStrategy: strategy,\n            panelClass: TOOLTIP_PANEL_CLASS,\n            scrollStrategy: this._scrollStrategy()\n        });\n        this._updatePosition();\n        this._overlayRef.detachments()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe((/**\n         * @return {?}\n         */\n        () => this._detach()));\n        return this._overlayRef;\n    }\n    /**\n     * Detaches the currently-attached tooltip.\n     * @private\n     * @return {?}\n     */\n    _detach() {\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n        }\n        this._tooltipInstance = null;\n    }\n    /**\n     * Updates the position of the current tooltip.\n     * @private\n     * @return {?}\n     */\n    _updatePosition() {\n        /** @type {?} */\n        const position = (/** @type {?} */ ((/** @type {?} */ (this._overlayRef)).getConfig().positionStrategy));\n        /** @type {?} */\n        const origin = this._getOrigin();\n        /** @type {?} */\n        const overlay = this._getOverlayPosition();\n        position.withPositions([\n            Object.assign(Object.assign({}, origin.main), overlay.main),\n            Object.assign(Object.assign({}, origin.fallback), overlay.fallback)\n        ]);\n    }\n    /**\n     * Returns the origin position and a fallback position based on the user's position preference.\n     * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n     * @return {?}\n     */\n    _getOrigin() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let originPosition;\n        if (position == 'above' || position == 'below') {\n            originPosition = { originX: 'center', originY: position == 'above' ? 'top' : 'bottom' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            originPosition = { originX: 'start', originY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            originPosition = { originX: 'end', originY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(originPosition.originX, originPosition.originY);\n        return {\n            main: originPosition,\n            fallback: { originX: x, originY: y }\n        };\n    }\n    /**\n     * Returns the overlay position and a fallback position based on the user's preference\n     * @return {?}\n     */\n    _getOverlayPosition() {\n        /** @type {?} */\n        const isLtr = !this._dir || this._dir.value == 'ltr';\n        /** @type {?} */\n        const position = this.position;\n        /** @type {?} */\n        let overlayPosition;\n        if (position == 'above') {\n            overlayPosition = { overlayX: 'center', overlayY: 'bottom' };\n        }\n        else if (position == 'below') {\n            overlayPosition = { overlayX: 'center', overlayY: 'top' };\n        }\n        else if (position == 'before' ||\n            (position == 'left' && isLtr) ||\n            (position == 'right' && !isLtr)) {\n            overlayPosition = { overlayX: 'end', overlayY: 'center' };\n        }\n        else if (position == 'after' ||\n            (position == 'right' && isLtr) ||\n            (position == 'left' && !isLtr)) {\n            overlayPosition = { overlayX: 'start', overlayY: 'center' };\n        }\n        else {\n            throw getMatTooltipInvalidPositionError(position);\n        }\n        const { x, y } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n        return {\n            main: overlayPosition,\n            fallback: { overlayX: x, overlayY: y }\n        };\n    }\n    /**\n     * Updates the tooltip message and repositions the overlay according to the new message length\n     * @private\n     * @return {?}\n     */\n    _updateTooltipMessage() {\n        // Must wait for the message to be painted to the tooltip so that the overlay can properly\n        // calculate the correct positioning based on the size of the text.\n        if (this._tooltipInstance) {\n            this._tooltipInstance.message = this.message;\n            this._tooltipInstance._markForCheck();\n            this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1), takeUntil(this._destroyed)).subscribe((/**\n             * @return {?}\n             */\n            () => {\n                if (this._tooltipInstance) {\n                    (/** @type {?} */ (this._overlayRef)).updatePosition();\n                }\n            }));\n        }\n    }\n    /**\n     * Updates the tooltip class\n     * @private\n     * @param {?} tooltipClass\n     * @return {?}\n     */\n    _setTooltipClass(tooltipClass) {\n        if (this._tooltipInstance) {\n            this._tooltipInstance.tooltipClass = tooltipClass;\n            this._tooltipInstance._markForCheck();\n        }\n    }\n    /**\n     * Inverts an overlay position.\n     * @private\n     * @param {?} x\n     * @param {?} y\n     * @return {?}\n     */\n    _invertPosition(x, y) {\n        if (this.position === 'above' || this.position === 'below') {\n            if (y === 'top') {\n                y = 'bottom';\n            }\n            else if (y === 'bottom') {\n                y = 'top';\n            }\n        }\n        else {\n            if (x === 'end') {\n                x = 'start';\n            }\n            else if (x === 'start') {\n                x = 'end';\n            }\n        }\n        return { x, y };\n    }\n    /**\n     * Binds the pointer events to the tooltip trigger.\n     * @private\n     * @return {?}\n     */\n    _setupPointerEvents() {\n        // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n        // first tap from firing its click event or can cause the tooltip to open for clicks.\n        if (!this._platform.IOS && !this._platform.ANDROID) {\n            this._passiveListeners\n                .set('mouseenter', (/**\n             * @return {?}\n             */\n            () => this.show()))\n                .set('mouseleave', (/**\n             * @return {?}\n             */\n            () => this.hide()));\n        }\n        else if (this.touchGestures !== 'off') {\n            this._disableNativeGesturesIfNecessary();\n            /** @type {?} */\n            const touchendListener = (/**\n             * @return {?}\n             */\n            () => {\n                clearTimeout(this._touchstartTimeout);\n                this.hide(this._defaultOptions.touchendHideDelay);\n            });\n            this._passiveListeners\n                .set('touchend', touchendListener)\n                .set('touchcancel', touchendListener)\n                .set('touchstart', (/**\n             * @return {?}\n             */\n            () => {\n                // Note that it's important that we don't `preventDefault` here,\n                // because it can prevent click events from firing on the element.\n                clearTimeout(this._touchstartTimeout);\n                this._touchstartTimeout = setTimeout((/**\n                 * @return {?}\n                 */\n                () => this.show()), LONGPRESS_DELAY);\n            }));\n        }\n        this._passiveListeners.forEach((/**\n         * @param {?} listener\n         * @param {?} event\n         * @return {?}\n         */\n        (listener, event) => {\n            this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);\n        }));\n    }\n    /**\n     * Disables the native browser gestures, based on how the tooltip has been configured.\n     * @private\n     * @return {?}\n     */\n    _disableNativeGesturesIfNecessary() {\n        /** @type {?} */\n        const element = this._elementRef.nativeElement;\n        /** @type {?} */\n        const style = element.style;\n        /** @type {?} */\n        const gestures = this.touchGestures;\n        if (gestures !== 'off') {\n            // If gestures are set to `auto`, we don't disable text selection on inputs and\n            // textareas, because it prevents the user from typing into them on iOS Safari.\n            if (gestures === 'on' || (element.nodeName !== 'INPUT' && element.nodeName !== 'TEXTAREA')) {\n                style.userSelect = style.msUserSelect = style.webkitUserSelect =\n                    ((/** @type {?} */ (style))).MozUserSelect = 'none';\n            }\n            // If we have `auto` gestures and the element uses native HTML dragging,\n            // we don't set `-webkit-user-drag` because it prevents the native behavior.\n            if (gestures === 'on' || !element.draggable) {\n                ((/** @type {?} */ (style))).webkitUserDrag = 'none';\n            }\n            style.touchAction = 'none';\n            style.webkitTapHighlightColor = 'transparent';\n        }\n    }\n}\nMatTooltip.ɵfac = function MatTooltip_Factory(t) { return new (t || MatTooltip)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵdirectiveInject(ElementRef)); };\nMatTooltip.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTooltip, selectors: [[\"\", \"matTooltip\", \"\"]], inputs: { showDelay: [\"matTooltipShowDelay\", \"showDelay\"], hideDelay: [\"matTooltipHideDelay\", \"hideDelay\"], touchGestures: [\"matTooltipTouchGestures\", \"touchGestures\"], position: [\"matTooltipPosition\", \"position\"], disabled: [\"matTooltipDisabled\", \"disabled\"], message: [\"matTooltip\", \"message\"], tooltipClass: [\"matTooltipClass\", \"tooltipClass\"] }, exportAs: [\"matTooltip\"] });\n/** @nocollapse */\nMatTooltip.ctorParameters = () => [\n    { type: Overlay },\n    { type: ElementRef },\n    { type: ScrollDispatcher },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: Platform },\n    { type: AriaDescriber },\n    { type: FocusMonitor },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_TOOLTIP_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_TOOLTIP_DEFAULT_OPTIONS,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [ElementRef,] }] }\n];\nMatTooltip.propDecorators = {\n    position: [{ type: Input, args: ['matTooltipPosition',] }],\n    disabled: [{ type: Input, args: ['matTooltipDisabled',] }],\n    showDelay: [{ type: Input, args: ['matTooltipShowDelay',] }],\n    hideDelay: [{ type: Input, args: ['matTooltipHideDelay',] }],\n    touchGestures: [{ type: Input, args: ['matTooltipTouchGestures',] }],\n    message: [{ type: Input, args: ['matTooltip',] }],\n    tooltipClass: [{ type: Input, args: ['matTooltipClass',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTooltip, [{\n        type: Directive,\n        args: [{\n                selector: '[matTooltip]',\n                exportAs: 'matTooltip'\n            }]\n    }], function () { return [{ type: ɵngcc1.Overlay }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.ScrollDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.Platform }, { type: ɵngcc4.AriaDescriber }, { type: ɵngcc4.FocusMonitor }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_TOOLTIP_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc5.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_TOOLTIP_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [ElementRef]\n            }] }]; }, { showDelay: [{\n            type: Input,\n            args: ['matTooltipShowDelay']\n        }], hideDelay: [{\n            type: Input,\n            args: ['matTooltipHideDelay']\n        }], touchGestures: [{\n            type: Input,\n            args: ['matTooltipTouchGestures']\n        }], position: [{\n            type: Input,\n            args: ['matTooltipPosition']\n        }], disabled: [{\n            type: Input,\n            args: ['matTooltipDisabled']\n        }], message: [{\n            type: Input,\n            args: ['matTooltip']\n        }], tooltipClass: [{\n            type: Input,\n            args: ['matTooltipClass']\n        }] }); })();\nif (false) {\n    /** @type {?} */\n    MatTooltip.ngAcceptInputType_disabled;\n    /** @type {?} */\n    MatTooltip.ngAcceptInputType_hideDelay;\n    /** @type {?} */\n    MatTooltip.ngAcceptInputType_showDelay;\n    /** @type {?} */\n    MatTooltip.prototype._overlayRef;\n    /** @type {?} */\n    MatTooltip.prototype._tooltipInstance;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._portal;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._position;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._disabled;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._tooltipClass;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._scrollStrategy;\n    /**\n     * The default delay in ms before showing the tooltip after show is called\n     * @type {?}\n     */\n    MatTooltip.prototype.showDelay;\n    /**\n     * The default delay in ms before hiding the tooltip after hide is called\n     * @type {?}\n     */\n    MatTooltip.prototype.hideDelay;\n    /**\n     * How touch gestures should be handled by the tooltip. On touch devices the tooltip directive\n     * uses a long press gesture to show and hide, however it can conflict with the native browser\n     * gestures. To work around the conflict, Angular Material disables native gestures on the\n     * trigger, but that might not be desirable on particular elements (e.g. inputs and draggable\n     * elements). The different values for this option configure the touch event handling as follows:\n     * - `auto` - Enables touch gestures for all elements, but tries to avoid conflicts with native\n     *   browser gestures on particular elements. In particular, it allows text selection on inputs\n     *   and textareas, and preserves the native browser dragging on elements marked as `draggable`.\n     * - `on` - Enables touch gestures for all elements and disables native\n     *   browser gestures with no exceptions.\n     * - `off` - Disables touch gestures. Note that this will prevent the tooltip from\n     *   showing on touch devices.\n     * @type {?}\n     */\n    MatTooltip.prototype.touchGestures;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._message;\n    /**\n     * Manually-bound passive event listeners.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._passiveListeners;\n    /**\n     * Timer started at the last `touchstart` event.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._touchstartTimeout;\n    /**\n     * Emits when the component is destroyed.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._destroyed;\n    /**\n     * Handles the keydown events on the host element.\n     * Needs to be an arrow function so that we can use it in addEventListener.\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._handleKeydown;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._overlay;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._elementRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._scrollDispatcher;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._viewContainerRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._ngZone;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._platform;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._ariaDescriber;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._focusMonitor;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._dir;\n    /**\n     * @type {?}\n     * @private\n     */\n    MatTooltip.prototype._defaultOptions;\n}\n/**\n * Internal component that wraps the tooltip's content.\n * \\@docs-private\n */\nclass TooltipComponent {\n    /**\n     * @param {?} _changeDetectorRef\n     * @param {?} _breakpointObserver\n     */\n    constructor(_changeDetectorRef, _breakpointObserver) {\n        this._changeDetectorRef = _changeDetectorRef;\n        this._breakpointObserver = _breakpointObserver;\n        /**\n         * Property watched by the animation framework to show or hide the tooltip\n         */\n        this._visibility = 'initial';\n        /**\n         * Whether interactions on the page should close the tooltip\n         */\n        this._closeOnInteraction = false;\n        /**\n         * Subject for notifying that the tooltip has been hidden from the view\n         */\n        this._onHide = new Subject();\n        /**\n         * Stream that emits whether the user has a handset-sized display.\n         */\n        this._isHandset = this._breakpointObserver.observe(Breakpoints.Handset);\n    }\n    /**\n     * Shows the tooltip with an animation originating from the provided origin\n     * @param {?} delay Amount of milliseconds to the delay showing the tooltip.\n     * @return {?}\n     */\n    show(delay) {\n        // Cancel the delayed hide if it is scheduled\n        if (this._hideTimeoutId) {\n            clearTimeout(this._hideTimeoutId);\n            this._hideTimeoutId = null;\n        }\n        // Body interactions should cancel the tooltip if there is a delay in showing.\n        this._closeOnInteraction = true;\n        this._showTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'visible';\n            this._showTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Begins the animation to hide the tooltip after the provided delay in ms.\n     * @param {?} delay Amount of milliseconds to delay showing the tooltip.\n     * @return {?}\n     */\n    hide(delay) {\n        // Cancel the delayed show if it is scheduled\n        if (this._showTimeoutId) {\n            clearTimeout(this._showTimeoutId);\n            this._showTimeoutId = null;\n        }\n        this._hideTimeoutId = setTimeout((/**\n         * @return {?}\n         */\n        () => {\n            this._visibility = 'hidden';\n            this._hideTimeoutId = null;\n            // Mark for check so if any parent component has set the\n            // ChangeDetectionStrategy to OnPush it will be checked anyways\n            this._markForCheck();\n        }), delay);\n    }\n    /**\n     * Returns an observable that notifies when the tooltip has been hidden from view.\n     * @return {?}\n     */\n    afterHidden() {\n        return this._onHide.asObservable();\n    }\n    /**\n     * Whether the tooltip is being displayed.\n     * @return {?}\n     */\n    isVisible() {\n        return this._visibility === 'visible';\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this._onHide.complete();\n    }\n    /**\n     * @return {?}\n     */\n    _animationStart() {\n        this._closeOnInteraction = false;\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    _animationDone(event) {\n        /** @type {?} */\n        const toState = (/** @type {?} */ (event.toState));\n        if (toState === 'hidden' && !this.isVisible()) {\n            this._onHide.next();\n        }\n        if (toState === 'visible' || toState === 'hidden') {\n            this._closeOnInteraction = true;\n        }\n    }\n    /**\n     * Interactions on the HTML body should close the tooltip immediately as defined in the\n     * material design spec.\n     * https://material.io/design/components/tooltips.html#behavior\n     * @return {?}\n     */\n    _handleBodyInteraction() {\n        if (this._closeOnInteraction) {\n            this.hide(0);\n        }\n    }\n    /**\n     * Marks that the tooltip needs to be checked in the next change detection run.\n     * Mainly used for rendering the initial text before positioning a tooltip, which\n     * can be problematic in components with OnPush change detection.\n     * @return {?}\n     */\n    _markForCheck() {\n        this._changeDetectorRef.markForCheck();\n    }\n}\nTooltipComponent.ɵfac = function TooltipComponent_Factory(t) { return new (t || TooltipComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.BreakpointObserver)); };\nTooltipComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: TooltipComponent, selectors: [[\"mat-tooltip-component\"]], hostAttrs: [\"aria-hidden\", \"true\"], hostVars: 2, hostBindings: function TooltipComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function TooltipComponent_click_HostBindingHandler() { return ctx._handleBodyInteraction(); }, false, ɵngcc0.ɵɵresolveBody);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"zoom\", ctx._visibility === \"visible\" ? 1 : null);\n    } }, decls: 3, vars: 7, consts: [[1, \"mat-tooltip\", 3, \"ngClass\"]], template: function TooltipComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"@state.start\", function TooltipComponent_Template_div_animation_state_start_0_listener() { return ctx._animationStart(); })(\"@state.done\", function TooltipComponent_Template_div_animation_state_done_0_listener($event) { return ctx._animationDone($event); });\n        ɵngcc0.ɵɵpipe(1, \"async\");\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var tmp_0_0 = null;\n        const currVal_0 = (tmp_0_0 = ɵngcc0.ɵɵpipeBind1(1, 5, ctx._isHandset)) == null ? null : tmp_0_0.matches;\n        ɵngcc0.ɵɵclassProp(\"mat-tooltip-handset\", currVal_0);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.tooltipClass)(\"@state\", ctx._visibility);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.message);\n    } }, directives: [ɵngcc7.NgClass], pipes: [ɵngcc7.AsyncPipe], styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"], encapsulation: 2, data: { animation: [matTooltipAnimations.tooltipState] }, changeDetection: 0 });\n/** @nocollapse */\nTooltipComponent.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: BreakpointObserver }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TooltipComponent, [{\n        type: Component,\n        args: [{\n                selector: 'mat-tooltip-component',\n                template: \"<div class=\\\"mat-tooltip\\\"\\n     [ngClass]=\\\"tooltipClass\\\"\\n     [class.mat-tooltip-handset]=\\\"(_isHandset | async)?.matches\\\"\\n     [@state]=\\\"_visibility\\\"\\n     (@state.start)=\\\"_animationStart()\\\"\\n     (@state.done)=\\\"_animationDone($event)\\\">{{message}}</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [matTooltipAnimations.tooltipState],\n                host: {\n                    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n                    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n                    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n                    '(body:click)': 'this._handleBodyInteraction()',\n                    'aria-hidden': 'true'\n                },\n                styles: [\".mat-tooltip-panel{pointer-events:none !important}.mat-tooltip{color:#fff;border-radius:4px;margin:14px;max-width:250px;padding-left:8px;padding-right:8px;overflow:hidden;text-overflow:ellipsis}.cdk-high-contrast-active .mat-tooltip{outline:solid 1px}.mat-tooltip-handset{margin:24px;padding-left:16px;padding-right:16px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc6.BreakpointObserver }]; }, null); })();\nif (false) {\n    /**\n     * Message to display in the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype.message;\n    /**\n     * Classes to be added to the tooltip. Supports the same syntax as `ngClass`.\n     * @type {?}\n     */\n    TooltipComponent.prototype.tooltipClass;\n    /**\n     * The timeout ID of any current timer set to show the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype._showTimeoutId;\n    /**\n     * The timeout ID of any current timer set to hide the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype._hideTimeoutId;\n    /**\n     * Property watched by the animation framework to show or hide the tooltip\n     * @type {?}\n     */\n    TooltipComponent.prototype._visibility;\n    /**\n     * Whether interactions on the page should close the tooltip\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._closeOnInteraction;\n    /**\n     * Subject for notifying that the tooltip has been hidden from the view\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._onHide;\n    /**\n     * Stream that emits whether the user has a handset-sized display.\n     * @type {?}\n     */\n    TooltipComponent.prototype._isHandset;\n    /**\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._changeDetectorRef;\n    /**\n     * @type {?}\n     * @private\n     */\n    TooltipComponent.prototype._breakpointObserver;\n}\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/tooltip-module.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass MatTooltipModule {\n}\nMatTooltipModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatTooltipModule });\nMatTooltipModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatTooltipModule_Factory(t) { return new (t || MatTooltipModule)(); }, providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            A11yModule,\n            CommonModule,\n            OverlayModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatTooltipModule, { declarations: function () { return [MatTooltip,\n        TooltipComponent]; }, imports: function () { return [A11yModule,\n        CommonModule,\n        OverlayModule,\n        MatCommonModule]; }, exports: function () { return [MatTooltip,\n        TooltipComponent,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTooltipModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    CommonModule,\n                    OverlayModule,\n                    MatCommonModule,\n                ],\n                exports: [MatTooltip, TooltipComponent, MatCommonModule],\n                declarations: [MatTooltip, TooltipComponent],\n                entryComponents: [TooltipComponent],\n                providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * Generated from: src/material/tooltip/public-api.ts\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_TOOLTIP_DEFAULT_OPTIONS, MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY, MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER, MatTooltip, MatTooltipModule, SCROLL_THROTTLE_MS, TOOLTIP_PANEL_CLASS, TooltipComponent, getMatTooltipInvalidPositionError, matTooltipAnimations };\n\n//# sourceMappingURL=tooltip.js.map","import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler = async) {\n    return (source) => source.lift(new SampleTimeOperator(period, scheduler));\n}\nclass SampleTimeOperator {\n    constructor(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    }\n}\nclass SampleTimeSubscriber extends Subscriber {\n    constructor(destination, period, scheduler) {\n        super(destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n    }\n    _next(value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    }\n}\nfunction dispatchNotification(state) {\n    let { subscriber, period } = state;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","import { Directive, ElementRef, EventEmitter, Input, NgModule, NgZone, Output } from '@angular/core';\nimport { fromEvent, of } from 'rxjs';\nimport { filter, map, mergeMap, sampleTime, tap } from 'rxjs/operators';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} selector\n * @param {?} scrollWindow\n * @param {?} defaultElement\n * @param {?} fromRoot\n * @return {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction resolveContainerElement(selector, scrollWindow, defaultElement, fromRoot) {\n    /** @type {?} */\n    const hasWindow = window && !!window.document && window.document.documentElement;\n    /** @type {?} */\n    let container = hasWindow && scrollWindow ? window : defaultElement;\n    if (selector) {\n        /** @type {?} */\n        const containerIsString = selector && hasWindow && typeof selector === 'string';\n        container = containerIsString\n            ? findElement(selector, defaultElement.nativeElement, fromRoot)\n            : selector;\n        if (!container) {\n            throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n        }\n    }\n    return container;\n}\n/**\n * @param {?} selector\n * @param {?} customRoot\n * @param {?} fromRoot\n * @return {?}\n */\nfunction findElement(selector, customRoot, fromRoot) {\n    /** @type {?} */\n    const rootEl = fromRoot ? window.document : customRoot;\n    return rootEl.querySelector(selector);\n}\n/**\n * @param {?} prop\n * @return {?}\n */\nfunction inputPropChanged(prop) {\n    return prop && !prop.firstChange;\n}\n/**\n * @return {?}\n */\nfunction hasWindowDefined() {\n    return typeof window !== 'undefined';\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst VerticalProps = {\n    clientHeight: \"clientHeight\",\n    offsetHeight: \"offsetHeight\",\n    scrollHeight: \"scrollHeight\",\n    pageYOffset: \"pageYOffset\",\n    offsetTop: \"offsetTop\",\n    scrollTop: \"scrollTop\",\n    top: \"top\"\n};\n/** @type {?} */\nconst HorizontalProps = {\n    clientHeight: \"clientWidth\",\n    offsetHeight: \"offsetWidth\",\n    scrollHeight: \"scrollWidth\",\n    pageYOffset: \"pageXOffset\",\n    offsetTop: \"offsetLeft\",\n    scrollTop: \"scrollLeft\",\n    top: \"left\"\n};\nclass AxisResolver {\n    /**\n     * @param {?=} vertical\n     */\n    constructor(vertical = true) {\n        this.vertical = vertical;\n        this.propsMap = vertical ? VerticalProps : HorizontalProps;\n    }\n    /**\n     * @return {?}\n     */\n    clientHeightKey() {\n        return this.propsMap.clientHeight;\n    }\n    /**\n     * @return {?}\n     */\n    offsetHeightKey() {\n        return this.propsMap.offsetHeight;\n    }\n    /**\n     * @return {?}\n     */\n    scrollHeightKey() {\n        return this.propsMap.scrollHeight;\n    }\n    /**\n     * @return {?}\n     */\n    pageYOffsetKey() {\n        return this.propsMap.pageYOffset;\n    }\n    /**\n     * @return {?}\n     */\n    offsetTopKey() {\n        return this.propsMap.offsetTop;\n    }\n    /**\n     * @return {?}\n     */\n    scrollTopKey() {\n        return this.propsMap.scrollTop;\n    }\n    /**\n     * @return {?}\n     */\n    topKey() {\n        return this.propsMap.top;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @param {?} alwaysCallback\n * @param {?} shouldFireScrollEvent\n * @param {?} isTriggeredCurrentTotal\n * @return {?}\n */\nfunction shouldTriggerEvents(alwaysCallback, shouldFireScrollEvent, isTriggeredCurrentTotal) {\n    if (alwaysCallback && shouldFireScrollEvent) {\n        return true;\n    }\n    if (!isTriggeredCurrentTotal && shouldFireScrollEvent) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction createResolver({ windowElement, axis }) {\n    return createResolverWithContainer({ axis, isWindow: isElementWindow(windowElement) }, windowElement);\n}\n/**\n * @param {?} resolver\n * @param {?} windowElement\n * @return {?}\n */\nfunction createResolverWithContainer(resolver, windowElement) {\n    /** @type {?} */\n    const container = resolver.isWindow || (windowElement && !windowElement.nativeElement)\n        ? windowElement\n        : windowElement.nativeElement;\n    return Object.assign({}, resolver, { container });\n}\n/**\n * @param {?} windowElement\n * @return {?}\n */\nfunction isElementWindow(windowElement) {\n    /** @type {?} */\n    const isWindow = ['Window', 'global'].some((obj) => Object.prototype.toString.call(windowElement).includes(obj));\n    return isWindow;\n}\n/**\n * @param {?} isContainerWindow\n * @param {?} windowElement\n * @return {?}\n */\nfunction getDocumentElement(isContainerWindow, windowElement) {\n    return isContainerWindow ? windowElement.document.documentElement : null;\n}\n/**\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePoints(element, resolver) {\n    /** @type {?} */\n    const height = extractHeightForElement(resolver);\n    return resolver.isWindow\n        ? calculatePointsForWindow(height, element, resolver)\n        : calculatePointsForElement(height, element, resolver);\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForWindow(height, element, resolver) {\n    const { axis, container, isWindow } = resolver;\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    // scrolled until now / current y point\n    /** @type {?} */\n    const scrolled = height +\n        getElementPageYOffset(getDocumentElement(isWindow, container), axis, isWindow);\n    // total height / most bottom y point\n    /** @type {?} */\n    const nativeElementHeight = getElementHeight(element.nativeElement, isWindow, offsetHeightKey, clientHeightKey);\n    /** @type {?} */\n    const totalToScroll = getElementOffsetTop(element.nativeElement, axis, isWindow) +\n        nativeElementHeight;\n    return { height, scrolled, totalToScroll, isWindow };\n}\n/**\n * @param {?} height\n * @param {?} element\n * @param {?} resolver\n * @return {?}\n */\nfunction calculatePointsForElement(height, element, resolver) {\n    const { axis, container } = resolver;\n    // perhaps use container.offsetTop instead of 'scrollTop'\n    /** @type {?} */\n    const scrolled = container[axis.scrollTopKey()];\n    /** @type {?} */\n    const totalToScroll = container[axis.scrollHeightKey()];\n    return { height, scrolled, totalToScroll, isWindow: false };\n}\n/**\n * @param {?} axis\n * @return {?}\n */\nfunction extractHeightPropKeys(axis) {\n    return {\n        offsetHeightKey: axis.offsetHeightKey(),\n        clientHeightKey: axis.clientHeightKey()\n    };\n}\n/**\n * @param {?} __0\n * @return {?}\n */\nfunction extractHeightForElement({ container, isWindow, axis }) {\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    return getElementHeight(container, isWindow, offsetHeightKey, clientHeightKey);\n}\n/**\n * @param {?} elem\n * @param {?} isWindow\n * @param {?} offsetHeightKey\n * @param {?} clientHeightKey\n * @return {?}\n */\nfunction getElementHeight(elem, isWindow, offsetHeightKey, clientHeightKey) {\n    if (isNaN(elem[offsetHeightKey])) {\n        /** @type {?} */\n        const docElem = getDocumentElement(isWindow, elem);\n        return docElem ? docElem[clientHeightKey] : 0;\n    }\n    else {\n        return elem[offsetHeightKey];\n    }\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementOffsetTop(elem, axis, isWindow) {\n    /** @type {?} */\n    const topKey = axis.topKey();\n    // elem = elem.nativeElement;\n    if (!elem.getBoundingClientRect) {\n        // || elem.css('none')) {\n        return;\n    }\n    return (elem.getBoundingClientRect()[topKey] +\n        getElementPageYOffset(elem, axis, isWindow));\n}\n/**\n * @param {?} elem\n * @param {?} axis\n * @param {?} isWindow\n * @return {?}\n */\nfunction getElementPageYOffset(elem, axis, isWindow) {\n    /** @type {?} */\n    const pageYOffset = axis.pageYOffsetKey();\n    /** @type {?} */\n    const scrollTop = axis.scrollTopKey();\n    /** @type {?} */\n    const offsetTop = axis.offsetTopKey();\n    if (isNaN(window[pageYOffset])) {\n        return getDocumentElement(isWindow, elem)[scrollTop];\n    }\n    else if (elem.ownerDocument) {\n        return elem.ownerDocument.defaultView[pageYOffset];\n    }\n    else {\n        return elem[offsetTop];\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} container\n * @param {?} distance\n * @param {?} scrollingDown\n * @return {?}\n */\nfunction shouldFireScrollEvent(container, distance, scrollingDown) {\n    /** @type {?} */\n    let remaining;\n    /** @type {?} */\n    let containerBreakpoint;\n    if (container.totalToScroll <= 0) {\n        return false;\n    }\n    /** @type {?} */\n    const scrolledUntilNow = container.isWindow ? container.scrolled : container.height + container.scrolled;\n    if (scrollingDown) {\n        remaining =\n            (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;\n        containerBreakpoint = distance.down / 10;\n    }\n    else {\n        /** @type {?} */\n        const totalHiddenContentHeight = container.scrolled + (container.totalToScroll - scrolledUntilNow);\n        remaining = container.scrolled / totalHiddenContentHeight;\n        containerBreakpoint = distance.up / 10;\n    }\n    /** @type {?} */\n    const shouldFireEvent = remaining <= containerBreakpoint;\n    return shouldFireEvent;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @return {?}\n */\nfunction isScrollingDownwards(lastScrollPosition, container) {\n    return lastScrollPosition < container.scrolled;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} container\n * @param {?} distance\n * @return {?}\n */\nfunction getScrollStats(lastScrollPosition, container, distance) {\n    /** @type {?} */\n    const scrollDown = isScrollingDownwards(lastScrollPosition, container);\n    return {\n        fire: shouldFireScrollEvent(container, distance, scrollDown),\n        scrollDown\n    };\n}\n/**\n * @param {?} position\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} scrollState\n * @return {?}\n */\n\n/**\n * @param {?} scroll\n * @param {?} scrollState\n * @param {?} triggered\n * @param {?} isScrollingDown\n * @return {?}\n */\n\n/**\n * @param {?} totalToScroll\n * @param {?} scrollState\n * @param {?} isScrollingDown\n * @return {?}\n */\n\n/**\n * @param {?} scrollState\n * @param {?} scrolledUntilNow\n * @param {?} totalToScroll\n * @return {?}\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass ScrollState {\n    /**\n     * @param {?} __0\n     */\n    constructor({ totalToScroll }) {\n        this.lastScrollPosition = 0;\n        this.lastTotalToScroll = 0;\n        this.totalToScroll = 0;\n        this.triggered = {\n            down: 0,\n            up: 0\n        };\n        this.totalToScroll = totalToScroll;\n    }\n    /**\n     * @param {?} position\n     * @return {?}\n     */\n    updateScrollPosition(position) {\n        return (this.lastScrollPosition = position);\n    }\n    /**\n     * @param {?} totalToScroll\n     * @return {?}\n     */\n    updateTotalToScroll(totalToScroll) {\n        if (this.lastTotalToScroll !== totalToScroll) {\n            this.lastTotalToScroll = this.totalToScroll;\n            this.totalToScroll = totalToScroll;\n        }\n    }\n    /**\n     * @param {?} scrolledUntilNow\n     * @param {?} totalToScroll\n     * @return {?}\n     */\n    updateScroll(scrolledUntilNow, totalToScroll) {\n        this.updateScrollPosition(scrolledUntilNow);\n        this.updateTotalToScroll(totalToScroll);\n    }\n    /**\n     * @param {?} scroll\n     * @param {?} isScrollingDown\n     * @return {?}\n     */\n    updateTriggeredFlag(scroll, isScrollingDown) {\n        if (isScrollingDown) {\n            this.triggered.down = scroll;\n        }\n        else {\n            this.triggered.up = scroll;\n        }\n    }\n    /**\n     * @param {?} totalToScroll\n     * @param {?} isScrollingDown\n     * @return {?}\n     */\n    isTriggeredScroll(totalToScroll, isScrollingDown) {\n        return isScrollingDown\n            ? this.triggered.down === totalToScroll\n            : this.triggered.up === totalToScroll;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} config\n * @return {?}\n */\nfunction createScroller(config) {\n    const { scrollContainer, scrollWindow, element, fromRoot } = config;\n    /** @type {?} */\n    const resolver = createResolver({\n        axis: new AxisResolver(!config.horizontal),\n        windowElement: resolveContainerElement(scrollContainer, scrollWindow, element, fromRoot)\n    });\n    /** @type {?} */\n    const scrollState = new ScrollState({\n        totalToScroll: calculatePoints(element, resolver)\n    });\n    /** @type {?} */\n    const options = {\n        container: resolver.container,\n        throttle: config.throttle\n    };\n    /** @type {?} */\n    const distance = {\n        up: config.upDistance,\n        down: config.downDistance\n    };\n    return attachScrollEvent(options).pipe(mergeMap(() => of(calculatePoints(element, resolver))), map((positionStats) => toInfiniteScrollParams(scrollState.lastScrollPosition, positionStats, distance)), tap(({ stats }) => scrollState.updateScroll(stats.scrolled, stats.totalToScroll)), filter(({ fire, scrollDown, stats: { totalToScroll } }) => shouldTriggerEvents(config.alwaysCallback, fire, scrollState.isTriggeredScroll(totalToScroll, scrollDown))), tap(({ scrollDown, stats: { totalToScroll } }) => {\n        scrollState.updateTriggeredFlag(totalToScroll, scrollDown);\n    }), map(toInfiniteScrollAction));\n}\n/**\n * @param {?} options\n * @return {?}\n */\nfunction attachScrollEvent(options) {\n    /** @type {?} */\n    let obs = fromEvent(options.container, 'scroll');\n    // For an unknown reason calling `sampleTime()` causes trouble for many users, even with `options.throttle = 0`.\n    // Let's avoid calling the function unless needed.\n    // See https://github.com/orizens/ngx-infinite-scroll/issues/198\n    if (options.throttle) {\n        obs = obs.pipe(sampleTime(options.throttle));\n    }\n    return obs;\n}\n/**\n * @param {?} lastScrollPosition\n * @param {?} stats\n * @param {?} distance\n * @return {?}\n */\nfunction toInfiniteScrollParams(lastScrollPosition, stats, distance) {\n    const { scrollDown, fire } = getScrollStats(lastScrollPosition, stats, distance);\n    return {\n        scrollDown,\n        fire,\n        stats\n    };\n}\n/** @type {?} */\nconst InfiniteScrollActions = {\n    DOWN: '[NGX_ISE] DOWN',\n    UP: '[NGX_ISE] UP'\n};\n/**\n * @param {?} response\n * @return {?}\n */\nfunction toInfiniteScrollAction(response) {\n    const { scrollDown, stats: { scrolled: currentScrollPosition } } = response;\n    return {\n        type: scrollDown ? InfiniteScrollActions.DOWN : InfiniteScrollActions.UP,\n        payload: {\n            currentScrollPosition\n        }\n    };\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InfiniteScrollDirective {\n    /**\n     * @param {?} element\n     * @param {?} zone\n     */\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.scrolled = new EventEmitter();\n        this.scrolledUp = new EventEmitter();\n        this.infiniteScrollDistance = 2;\n        this.infiniteScrollUpDistance = 1.5;\n        this.infiniteScrollThrottle = 150;\n        this.infiniteScrollDisabled = false;\n        this.infiniteScrollContainer = null;\n        this.scrollWindow = true;\n        this.immediateCheck = false;\n        this.horizontal = false;\n        this.alwaysCallback = false;\n        this.fromRoot = false;\n    }\n    /**\n     * @return {?}\n     */\n    ngAfterViewInit() {\n        if (!this.infiniteScrollDisabled) {\n            this.setup();\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance }) {\n        /** @type {?} */\n        const containerChanged = inputPropChanged(infiniteScrollContainer);\n        /** @type {?} */\n        const disabledChanged = inputPropChanged(infiniteScrollDisabled);\n        /** @type {?} */\n        const distanceChanged = inputPropChanged(infiniteScrollDistance);\n        /** @type {?} */\n        const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n            (disabledChanged && !infiniteScrollDisabled.currentValue) || distanceChanged;\n        if (containerChanged || disabledChanged || distanceChanged) {\n            this.destroyScroller();\n            if (shouldSetup) {\n                this.setup();\n            }\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setup() {\n        if (hasWindowDefined()) {\n            this.zone.runOutsideAngular(() => {\n                this.disposeScroller = createScroller({\n                    fromRoot: this.fromRoot,\n                    alwaysCallback: this.alwaysCallback,\n                    disable: this.infiniteScrollDisabled,\n                    downDistance: this.infiniteScrollDistance,\n                    element: this.element,\n                    horizontal: this.horizontal,\n                    scrollContainer: this.infiniteScrollContainer,\n                    scrollWindow: this.scrollWindow,\n                    throttle: this.infiniteScrollThrottle,\n                    upDistance: this.infiniteScrollUpDistance\n                }).subscribe((payload) => this.zone.run(() => this.handleOnScroll(payload)));\n            });\n        }\n    }\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    handleOnScroll({ type, payload }) {\n        switch (type) {\n            case InfiniteScrollActions.DOWN:\n                return this.scrolled.emit(payload);\n            case InfiniteScrollActions.UP:\n                return this.scrolledUp.emit(payload);\n            default:\n                return;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    ngOnDestroy() {\n        this.destroyScroller();\n    }\n    /**\n     * @return {?}\n     */\n    destroyScroller() {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    }\n}\nInfiniteScrollDirective.ɵfac = function InfiniteScrollDirective_Factory(t) { return new (t || InfiniteScrollDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nInfiniteScrollDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: InfiniteScrollDirective, selectors: [[\"\", \"infiniteScroll\", \"\"], [\"\", \"infinite-scroll\", \"\"], [\"\", \"data-infinite-scroll\", \"\"]], inputs: { infiniteScrollDistance: \"infiniteScrollDistance\", infiniteScrollUpDistance: \"infiniteScrollUpDistance\", infiniteScrollThrottle: \"infiniteScrollThrottle\", infiniteScrollDisabled: \"infiniteScrollDisabled\", infiniteScrollContainer: \"infiniteScrollContainer\", scrollWindow: \"scrollWindow\", immediateCheck: \"immediateCheck\", horizontal: \"horizontal\", alwaysCallback: \"alwaysCallback\", fromRoot: \"fromRoot\" }, outputs: { scrolled: \"scrolled\", scrolledUp: \"scrolledUp\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/** @nocollapse */\nInfiniteScrollDirective.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NgZone }\n];\nInfiniteScrollDirective.propDecorators = {\n    scrolled: [{ type: Output }],\n    scrolledUp: [{ type: Output }],\n    infiniteScrollDistance: [{ type: Input }],\n    infiniteScrollUpDistance: [{ type: Input }],\n    infiniteScrollThrottle: [{ type: Input }],\n    infiniteScrollDisabled: [{ type: Input }],\n    infiniteScrollContainer: [{ type: Input }],\n    scrollWindow: [{ type: Input }],\n    immediateCheck: [{ type: Input }],\n    horizontal: [{ type: Input }],\n    alwaysCallback: [{ type: Input }],\n    fromRoot: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InfiniteScrollDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { scrolled: [{\n            type: Output\n        }], scrolledUp: [{\n            type: Output\n        }], infiniteScrollDistance: [{\n            type: Input\n        }], infiniteScrollUpDistance: [{\n            type: Input\n        }], infiniteScrollThrottle: [{\n            type: Input\n        }], infiniteScrollDisabled: [{\n            type: Input\n        }], infiniteScrollContainer: [{\n            type: Input\n        }], scrollWindow: [{\n            type: Input\n        }], immediateCheck: [{\n            type: Input\n        }], horizontal: [{\n            type: Input\n        }], alwaysCallback: [{\n            type: Input\n        }], fromRoot: [{\n            type: Input\n        }] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass InfiniteScrollModule {\n}\nInfiniteScrollModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: InfiniteScrollModule });\nInfiniteScrollModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function InfiniteScrollModule_Factory(t) { return new (t || InfiniteScrollModule)(); }, providers: [], imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(InfiniteScrollModule, { declarations: [InfiniteScrollDirective], exports: [InfiniteScrollDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(InfiniteScrollModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [InfiniteScrollDirective],\n                exports: [InfiniteScrollDirective],\n                imports: [],\n                providers: []\n            }]\n    }], null, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Angular library starter.\n * Build an Angular library compatible with AoT compilation & Tree shaking.\n * Written by Roberto Simonetti.\n * MIT license.\n * https://github.com/robisim74/angular-library-starter\n */\n/**\n * Entry point for all public APIs of the package.\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteScrollDirective, InfiniteScrollModule };\n\n//# sourceMappingURL=ngx-infinite-scroll.js.map","import {\n    AfterContentInit,\n    ChangeDetectorRef,\n    Component,\n    ElementRef,\n    ViewChild\n} from \"@angular/core\";\n\n@Component({\n    selector: \"jellyfin-slider\",\n    templateUrl: \"./slider.component.html\",\n    styleUrls: [\"./slider.component.scss\"]\n})\nexport class SliderComponent implements AfterContentInit {\n    @ViewChild(\"slider\", { static: true }) public slider: ElementRef<HTMLDivElement>;\n\n    constructor(private changeDetector: ChangeDetectorRef) {}\n\n    public ngAfterContentInit() {\n        this.slider.nativeElement.addEventListener(\"scroll\", () => {\n            this.changeDetector.detectChanges();\n        });\n    }\n\n    public more() {\n        console.log(\"load more\");\n    }\n\n    public left() {\n        const parentRect = (this.slider.nativeElement.getClientRects() as DOMRectList)[0];\n        for (const child of Array.from(this.slider.nativeElement.children).reverse()) {\n            const rect = (child.getClientRects() as DOMRectList)[0];\n            const beyondBorder = rect.right < parentRect.left;\n            if (beyondBorder) {\n                child.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n                break;\n            }\n        }\n    }\n\n    public right() {\n        const parentRect = (this.slider.nativeElement.getClientRects() as DOMRectList)[0];\n        for (const child of Array.from(this.slider.nativeElement.children)) {\n            const rect = (child.getClientRects() as DOMRectList)[0];\n            const beyondBorder = rect.left > parentRect.right;\n            if (beyondBorder) {\n                child.scrollIntoView({ behavior: \"smooth\", block: \"start\" });\n                break;\n            }\n        }\n    }\n\n    public get isLeft() {\n        const parentRect = (this.slider.nativeElement.getClientRects() as DOMRectList)[0];\n        const rect = (this.slider.nativeElement.children[1].getClientRects() as DOMRectList)[0];\n        return rect.left >= parentRect.left;\n    }\n\n    public get isRight() {\n        const parentRect = (this.slider.nativeElement.getClientRects() as DOMRectList)[0];\n        const rect = (this.slider.nativeElement.children[\n            this.slider.nativeElement.children.length - 2\n        ].getClientRects() as DOMRectList)[0];\n        return rect.right <= parentRect.right;\n    }\n}\n","<div class=\"wrapper\">\n    <button mat-fab class=\"scroll-fab left\" [disabled]=\"isLeft\" (click)=\"left()\">&lt;</button>\n    <button mat-fab class=\"scroll-fab right\" [disabled]=\"isRight\" (click)=\"right()\">&gt;</button>\n    <div\n        class=\"slider\"\n        #slider\n        infinite-scroll\n        [horizontal]=\"true\"\n        [infiniteScrollDistance]=\"20\"\n        [immediateCheck]=\"true\"\n        [scrollWindow]=\"false\"\n        (scrolled)=\"more()\"\n    >\n        <div class=\"start\"></div>\n        <ng-content></ng-content>\n        <div class=\"end\"></div>\n    </div>\n</div>\n","<ng-container *ngIf=\"loaded\">\n    <section>\n        <h2>My Media</h2>\n        <jellyfin-slider>\n            <ng-container *ngFor=\"let view of myMedia\">\n                <div class=\"tile landscape\" *ngIf=\"view.type\">\n                    <a [routerLink]=\"viewUrl(view.type).toString()\">\n                        <mat-card mat-ripple>\n                            <div mat-card-image>\n                                <div class=\"img-wrapper\" *ngIf=\"view.image\">\n                                    <img\n                                        class=\"inner-img\"\n                                        [src]=\"view.image\"\n                                        [alt]=\"view.subtitle\"\n                                        (dragstart)=\"$event.preventDefault()\"\n                                    />\n                                </div>\n                                <div class=\"no-image\" *ngIf=\"!view.image\">\n                                    <mat-icon>{{ viewIcon(view.type) }}</mat-icon>\n                                </div>\n                            </div>\n                            <mat-card-subtitle>\n                                {{ view.subtitle }}\n                            </mat-card-subtitle>\n                        </mat-card>\n                    </a>\n                </div>\n            </ng-container>\n        </jellyfin-slider>\n    </section>\n    <section>\n        <h2 class=\"details-heading\">\n            <a href=\"#\">\n                <span class=\"heading\">Continue watching</span><span class=\"arrow\"> &gt;</span>\n            </a>\n        </h2>\n        <jellyfin-slider>\n            <div class=\"tile landscape\" *ngFor=\"let movie of continueWatching\">\n                <mat-card\n                    mat-ripple\n                    [matTooltip]=\"movie.originalTitle\"\n                    matTooltipPosition=\"below\"\n                    aria-label=\"movie.originalTitle\"\n                >\n                    <div mat-card-image>\n                        <div class=\"img-wrapper\">\n                            <img\n                                *ngIf=\"movie.image\"\n                                class=\"inner-img\"\n                                [src]=\"movie.image\"\n                                [alt]=\"movie.subtitle\"\n                                (dragstart)=\"$event.preventDefault()\"\n                            />\n                            <mat-progress-bar\n                                [value]=\"movie.progress\"\n                                color=\"accent\"\n                            ></mat-progress-bar>\n                        </div>\n                    </div>\n                    <mat-card-subtitle>\n                        {{ movie.subtitle }}\n                        <div *ngIf=\"movie.year\" class=\"year\">\n                            {{ movie.year }}\n                        </div>\n                    </mat-card-subtitle>\n                </mat-card>\n            </div>\n        </jellyfin-slider>\n    </section>\n    <section>\n        <h2>Latest movies</h2>\n        <jellyfin-slider>\n            <div class=\"tile portrait\" *ngFor=\"let movie of latestMovies\">\n                <mat-card\n                    mat-ripple\n                    [matTooltip]=\"movie.originalTitle\"\n                    matTooltipPosition=\"below\"\n                    aria-label=\"movie.originalTitle\"\n                >\n                    <div mat-card-image>\n                        <img\n                            *ngIf=\"movie.image\"\n                            class=\"inner-img\"\n                            [src]=\"movie.image\"\n                            [alt]=\"movie.subtitle\"\n                            (dragstart)=\"$event.preventDefault()\"\n                        />\n                    </div>\n                    <mat-card-subtitle>\n                        {{ movie.subtitle }}\n                        <div *ngIf=\"movie.year\" class=\"year\">\n                            {{ movie.year }}\n                        </div>\n                    </mat-card-subtitle>\n                </mat-card>\n            </div>\n        </jellyfin-slider>\n    </section>\n</ng-container>\n<mat-spinner *ngIf=\"!loaded\"></mat-spinner>\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router, UrlTree } from \"@angular/router\";\nimport { map } from \"rxjs/operators\";\nimport { AuthService } from \"../../auth/auth.service\";\nimport { ApiService } from \"../../common/api/api.service\";\n\nexport interface Tile {\n    image?: string;\n    subtitle: string;\n}\n\nexport const enum ViewTypes {\n    MOVIES = \"movies\",\n    HOME_VIDEOS = \"homevideos\"\n}\n\nexport interface ViewTile extends Tile {\n    type: ViewTypes;\n}\n\nexport interface MovieTile extends Tile {\n    year?: string | number;\n    originalTitle: string | null;\n}\n\nexport interface ContinueTile extends MovieTile {\n    progress: number;\n}\n\n@Component({\n    selector: \"jellyfin-home\",\n    templateUrl: \"./home.component.html\",\n    styleUrls: [\"./home.component.scss\"]\n})\nexport class HomeComponent implements OnInit {\n    // All images are just random tmdb images, inserted as design stubs\n    public myMedia: ViewTile[] = [];\n    public continueWatching: ContinueTile[] = [];\n    public latestMovies: MovieTile[] = [];\n    public loaded = false;\n\n    constructor(\n        private apiService: ApiService,\n        private authService: AuthService,\n        private router: Router\n    ) {}\n\n    public ngOnInit() {\n        Promise.all([this.loadViews(), this.loadStarted(), this.loadLatest()]).then(() => {\n            this.loaded = true;\n        });\n    }\n\n    public viewUrl(type: ViewTypes): UrlTree {\n        switch (type) {\n            case ViewTypes.MOVIES: {\n                return this.router.createUrlTree([\"movies\"]);\n            }\n            case ViewTypes.HOME_VIDEOS: {\n                return this.router.createUrlTree([\"home_videos\"]);\n            }\n            default: {\n                // TODO: Implement more\n                // assertNever(type);\n            }\n        }\n    }\n\n    public viewIcon(type: ViewTypes): string {\n        switch (type) {\n            case ViewTypes.MOVIES: {\n                return \"movie\";\n            }\n            case ViewTypes.HOME_VIDEOS: {\n                return \"camera_alt\";\n            }\n            default: {\n                // TODO: Implement more\n                // assertNever(type);\n            }\n        }\n    }\n\n    private loadViews() {\n        return this.apiService\n            .get<any>(`/Users/${this.authService.userId}/Views`)\n            .pipe(\n                map(resp => {\n                    for (const item of resp.Items) {\n                        const tile: ViewTile = {\n                            subtitle: item.Name,\n                            type: item.CollectionType\n                        };\n                        if (item.ImageTags.Primary) {\n                            tile.image = this.apiService.assembleUrl(\n                                `/Items/${item.Id}/Images/Primary`,\n                                {\n                                    tag: item.ImageTags.Primary,\n                                    quality: \"90\",\n                                    maxWidth: \"400\",\n                                    maxHeight: \"400\"\n                                }\n                            );\n                        }\n                        this.myMedia.push(tile);\n                    }\n                })\n            )\n            .toPromise();\n    }\n\n    private loadStarted() {\n        return this.apiService\n            .get<any>(`/Users/${this.authService.userId}/Items/Resume`, {\n                query: {\n                    Limit: \"12\",\n                    Recursive: \"true\",\n                    ImageTypeLimit: \"1\",\n                    EnableImageTypes: \"Primary,Backdrop,Thumb\",\n                    EnableTotalRecordCount: \"false\",\n                    MediaTypes: \"Video\"\n                }\n            })\n            .pipe(\n                map(resp => {\n                    for (const item of resp.Items) {\n                        const [title, cut] = this.sliceTitle(item.Name);\n                        const tile: ContinueTile = {\n                            subtitle: title,\n                            year: new Date(item.PremiereDate).getFullYear(),\n                            originalTitle: cut ? item.Name : null,\n                            progress: item.UserData.PlayedPercentage\n                        };\n                        if (item.BackdropImageTags && item.BackdropImageTags.length > 0) {\n                            tile.image = this.apiService.assembleUrl(\n                                `/Items/${item.Id}/Images/Backdrop`,\n                                {\n                                    tag: item.BackdropImageTags[0],\n                                    quality: \"90\",\n                                    maxWidth: \"400\",\n                                    maxHeight: \"400\"\n                                }\n                            );\n                        } else if (item.ImageTags && Object.keys(item.ImageTags).length > 0) {\n                            const imageType = Object.keys(item.ImageTags)[0];\n                            tile.image = this.apiService.assembleUrl(\n                                `/Items/${item.Id}/Images/${imageType}`,\n                                {\n                                    tag: item.ImageTags[imageType],\n                                    quality: \"90\",\n                                    maxWidth: \"400\",\n                                    maxHeight: \"400\"\n                                }\n                            );\n                        }\n                        this.continueWatching.push(tile);\n                    }\n                })\n            )\n            .toPromise();\n    }\n\n    private loadLatest() {\n        return this.apiService\n            .get<any>(`/Users/${this.authService.userId}/Items/Latest`, {\n                query: {\n                    Limit: \"10\",\n                    EnableImageType: \"Primary\"\n                }\n            })\n            .pipe(\n                map(resp => {\n                    for (const item of resp) {\n                        const [title, cut] = this.sliceTitle(item.Name);\n                        const tile: MovieTile = {\n                            subtitle: title,\n                            year: new Date(item.PemiereDate).getFullYear(),\n                            originalTitle: cut ? item.Name : null\n                        };\n                        if (item.ImageTags.Primary) {\n                            tile.image = this.apiService.assembleUrl(\n                                `/Items/${item.Id}/Images/Primary`,\n                                {\n                                    tag: item.ImageTags.Primary,\n                                    quality: \"90\",\n                                    maxWidth: \"400\",\n                                    maxHeight: \"400\"\n                                }\n                            );\n                        }\n                        this.latestMovies.push(tile);\n                    }\n                })\n            )\n            .toPromise();\n    }\n\n    private sliceTitle(title) {\n        let cut = false;\n        if (title.length > 25) {\n            cut = true;\n            const space = title.slice(0, 26).lastIndexOf(\" \");\n            if (space > 15) {\n                title = `${title.slice(0, space)}...`;\n            } else {\n                title = `${title.slice(0, 26)}...`;\n            }\n        }\n        return [title, cut];\n    }\n}\n","export enum Order {\n    ASCENDING = \"Ascending\",\n    DESCENDING = \"Descending\"\n}\n\nexport enum SortAttributes {\n    SORT_NAME = \"SortName\"\n}\n","<div\n    class=\"list-wrapper\"\n    infinite-scroll\n    [scrollWindow]=\"false\"\n    [infiniteScrollDistance]=\"20\"\n    [immediateCheck]=\"true\"\n    [horizontal]=\"false\"\n    (scrolled)=\"loadMore()\"\n>\n    <mat-grid-list cols=\"7\">\n        <mat-grid-tile *ngFor=\"let movie of movies\">\n            <mat-card mat-ripple>\n                <img mat-card-image *ngIf=\"movie.image\" [src]=\"movie.image\" />\n            </mat-card>\n        </mat-grid-tile>\n    </mat-grid-list>\n</div>\n","import { NgModule } from \"@angular/core\";\nimport { RouterModule, Routes } from \"@angular/router\";\nimport { HomeComponent } from \"../library/home/home.component\";\nimport { MoviesComponent } from \"../library/movies/movies.component\";\n\nconst routes: Routes = [\n    {\n        path: \"\",\n        component: HomeComponent\n    },\n    {\n        path: \"movies\",\n        component: MoviesComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class ShellRoutingModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { AuthService } from \"../../auth/auth.service\";\nimport { ApiService } from \"../../common/api/api.service\";\nimport { Item } from \"../../common/api/item\";\nimport { ItemHelper } from \"../../utils/api-helpers\";\nimport { Order, SortAttributes } from \"../../utils/emums\";\n\ninterface MovieTile {\n    image?: string;\n}\n\n@Component({\n    selector: \"jellyfin-movies\",\n    templateUrl: \"./movies.component.html\",\n    styleUrls: [\"./movies.component.scss\"]\n})\nexport class MoviesComponent implements OnInit {\n    private sortAttr = SortAttributes.SORT_NAME;\n    private sortOrder = Order.ASCENDING;\n\n    public movies?: MovieTile[];\n\n    constructor(private apiService: ApiService, private authService: AuthService) {}\n\n    public ngOnInit() {\n        const imageTypes = [\"Primary\", \"Backdrop\", \"Banner\", \"Thumb\"];\n        this.apiService\n            .get<{ Items: Item[] }>(`/Users/${this.authService.userId}/Items`, {\n                query: {\n                    SortBy: this.sortAttr,\n                    SortOrder: this.sortOrder,\n                    IncludeItemTypes: \"Movie\",\n                    Recursive: \"true\",\n                    Fields: \"PrimaryImageAspectRatio,MediaSourceCount,BasicSyncInfo\",\n                    ImageTypeLimit: \"1\",\n                    EnableImageTypes: imageTypes.join(\",\"),\n                    StartIndex: \"0\",\n                    Limit: \"100\"\n                }\n            })\n            .subscribe(({ Items }) => {\n                this.movies = Items.map(\n                    (item): MovieTile => {\n                        const helper = new ItemHelper(item);\n\n                        return {\n                            image: helper.getFirstImageLocation(this.apiService.base, imageTypes)\n                        };\n                    }\n                );\n            });\n    }\n\n    public loadMore() {\n        console.log(\"load more\");\n    }\n}\n","import { CommonModule } from \"@angular/common\";\nimport { NgModule } from \"@angular/core\";\nimport { MatButtonModule } from \"@angular/material/button\";\nimport { MatCardModule } from \"@angular/material/card\";\nimport { MatRippleModule } from \"@angular/material/core\";\nimport { MatGridListModule } from \"@angular/material/grid-list\";\nimport { MatIconModule } from \"@angular/material/icon\";\nimport { MatProgressBarModule } from \"@angular/material/progress-bar\";\nimport { MatProgressSpinnerModule } from \"@angular/material/progress-spinner\";\nimport { MatTooltipModule } from \"@angular/material/tooltip\";\nimport { InfiniteScrollModule } from \"ngx-infinite-scroll\";\nimport { SliderComponent } from \"../common/slider/slider.component\";\n\nimport { HomeComponent } from \"../library/home/home.component\";\nimport { MoviesComponent } from \"../library/movies/movies.component\";\nimport { ShellRoutingModule } from \"./shell-routing.module\";\n\n@NgModule({\n    declarations: [HomeComponent, SliderComponent, MoviesComponent],\n    imports: [\n        CommonModule,\n        ShellRoutingModule,\n        MatCardModule,\n        MatButtonModule,\n        MatRippleModule,\n        MatProgressSpinnerModule,\n        InfiniteScrollModule,\n        MatTooltipModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatGridListModule\n    ],\n    bootstrap: []\n})\nexport class ShellModule {}\n"],"sourceRoot":"webpack:///"}